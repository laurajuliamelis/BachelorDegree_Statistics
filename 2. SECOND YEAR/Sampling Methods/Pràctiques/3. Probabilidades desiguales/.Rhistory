u <- seq(5,100,5)
u
u[seq(from=2, to=length(u), by=2)] <- NULL
u[seq(from=2, to=length(u), by=2)] <- NA
u
w <- which(is.na(u))
w
w <- na.omit(u)
w
D <- matrix(rep(0,length(w)))
D
D <- matrix(rep(0,length(w)^2))
D
D <- matrix(rep(0,length(w)*length(w)))
D
D <- matrix(rep(0,length(w)*length(w), length(w)))
D
D <- matrix(rep(0,length(w), length(w)))
D
View(D)
u <- seq(5,100,5)
v <- 2^(1:20)
u[seq(from=2, to=length(u), by=2)] <- NA
w <- na.omit(u)
D <-diag(w)
D
w
solve(D)*D
det(D)
A <- matrix(rep(5,100), nrow=10)
A
row(A)
nrow(A)
col(A)
v <- c(5,7,6,5,4,5,6,7,6,5)
Hi_es <- function (e, v){
if( length(v) > 0){
for(i in 1:length(v)){
if( v[i] == e){
return(TRUE)
}
}
}
return(FALSE)
}
uniq <- function (v){
x <- vector()
for ( i in 1: length (v)){
e <- v[i]
if ( !Hi_es (e,x) ){
x <- c(x, e)
}
}
return(x)
}
uniq(v)
install.packages("Rcmdr")
search()
library(Rcmdr)
library("Rcmdr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
lm
library(Rcmdr)
library(Rcmdr)
ñ,
,ç
search()
pbinom(q=5, size = 10, prob = 0-3, lower.tail = T)
pbinom(q=5, size = 10, prob = 0.3, lower.tail = T)
pbinom(q=5, size = 10, prob = 0.8, lower.tail = T)
pbinom(q=3, size = 6, prob = 0.4, lower.tail = T)
1-0.8208
pnorm(q = 10.048 , mean = 10, sd = 0.19, lower.tail = F)
pnorm(q = 25.061 , mean = 25, sd = 0.04, lower.tail = F)
pnorm(q = 10.048 , mean = 10, sd = 0.07, lower.tail = F)
pnorm(q = 10.048 , mean = 10, sd = 0.03, lower.tail = F)
pnorm(q = 10.048 , mean = 10, sd = 3, lower.tail = F)
pbinom(q=3, size = 7, prob = 0.4, lower.tail = T)
pbinom(q=1, size = 7, prob = 0.4, lower.tail = T)
1-0.1586304
pbinom(q=1, size = 9, prob = 0.06, lower.tail = T)
pbinom(q=6, size = 9, prob = 0.5, lower.tail = T)
pbinom(q=4, size = 5, prob = 0.5, lower.tail = T)
pbinom(q=6, size = 9, prob = 0.8, lower.tail = T)
pbinom(q=4, size = 8, prob = 0.5, lower.tail = T)
pbinom(q=6, size = 11, prob = 0.4, lower.tail = T)
pbinom(q=4, size = 6, prob = 0.5, lower.tail = T)
pbinom(q=4, size = 5, prob = 0.4, lower.tail = T)
pbinom(q=4, size = 9, prob = 0.3, lower.tail = T)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
library(Rcmdr)
mean(Estatus)
x <- 0.1438259
x
x^2
mean(Dattasetdv)
mean(Datasetdv)
View(Datasetdv)
View(Datasetdv$x1)
mean(Datasetdv$X1)
media <- mean(Datasetdv$X1)
desv <- sd(Datasetdv$X1)
INF <- media - qnorm(0.995)*(desv/sqrt(13))
SUP <- media + qnorm(0.995)*(desv/sqrt(13))
2.9 - qnorm(0.995)*(0.14/sqrt(13))
qnorm(0.995)
2.9 - qnorm(0.995)*(0.14
)
sqrt(x =13)
sqrt(13)
sqrt(0.02/13)
INF <- media - qnorm(0.995)*(sqrt(0.02/13))
INF <- media - qnorm(0.99)*(sqrt(0.02/13))
INF <- media - qnorm(0.95)*(sqrt(0.02/13))
INF <- media - qnorm(0.99)*(sqrt(0.02/13))
INF <- media - qnorm(0.999)*(sqrt(0.02/13))
INF <- media - qnorm(0.9999)*(sqrt(0.02/13))
INF <- media - qnorm(0.9995)*(sqrt(0.02/13))
INF <- media - qnorm(0.999)*(sqrt(0.02/13))
mean-2.81*desv/sqrt(13)
media -2.81*desv/sqrt(13)
media +2.81*desv/sqrt(13)
media +2.81*desv
media -2.81*desv
media -2.81*0.02/sqrt(13)
media -2.81*(0.02/sqrt(13))
media -2.81*((desv^2)/sqrt(13))
media -2.81*((desv^2)/13)
media -2.81*(0.02/13)
qnorm(0.995)
qnorm(0.99)
qnorm(0.95)
pnorm(0.95)
qnorm(0.95)
library(Rcmdr)
0.173239*0.173239
ci <- 2.913333 - qt(0.999, 17)*0.173239/sqrt(18)
ci <- 2.93 - qt(0.98, 21)*0.1414/sqrt(22)
cs <- 2.93 + qt(0.98, 21)*0.1414/sqrt(22)
cs <- 2.913333 + qt(0.999, 17)*0.173239/sqrt(18)
CI <- 17*0.03/qchisq(0.999,17)
CS <- 17*0.03/qchisq(0.001,17)
0.1698892*0.1698892
CI <- 21*0.03/qchisq(0.98,21)
CS <- 21*0.03/qchisq(0.02,21)
CI <- 3*50.83/qchisq(0.95,3)
CI <- 3*50.8369/qchisq(0.95,3)
CI <- 3*50.8369/qchisq(0.05,3)
ci <- 112.31 - qt(0.98, 3)*7.13/sqrt(4)
ci <- 112.31 - qt(0.95, 3)*7.13/sqrt(4)
cs <- 112.31 + qt(0.95, 3)*7.13/sqrt(4)
qt(0.95, 24)
qt(0.05, 24)
qt(0.025, 24)
qt(1- 0.95, 24)
qt(0.025, 24)
qt(0.025, 24, lower.tail = F)
qt(0.0125, 15, lower.tail = F)
qchisq(0.025, 24)
qchisq(0.975, 24)
qchisq(0.0125, 15)
qchisq(0.9875, 15)
setwd("~/Estadística/Segon/2on quatri/Mètodes de mostratge")
install.packages("sampling")
library(sampling)
base<-read.table("AnuarioN.CSV",header=TRUE,sep=";",dec=",",row.names=1)
library(sampling)
base<-read.table("AnuarioN.CSV",header=TRUE,sep=";",dec=",",row.names=1)
setwd("~/Estadística/Segon/2on quatri/Mètodes de mostratge/Pràctiques/Probabilidades desiguales")
base<-read.table("AnuarioN.CSV",header=TRUE,sep=";",dec=",",row.names=1)
View(base)
names(base)
View(base)
# 1. CÁLCULO DE LAS PROBABILIDADES DE INCLUSIÓN PROPORCIONALES A LA VARIABLE Pob2010.
Y <- base$ActComMinor # variable de interés
X <- base$Pob2010     # variable auxiliar
X
n <- 70
pik = inclusionprobabilities(x, n) #probabilidades de inclusión
pik = inclusionprobabilities(X, n) #probabilidades de inclusión
head(pik)
sum(pik)
PI <- UPsystematicpi2(pik) # nos dará un tamaño de la muestra segun la prob de inclusion
PI
library (sampling)
base<-read.table ("AnuarioN.csv", header=TRUE, sep=";", dec=",", row.names=1)
X<-base$Pob2010 ##Variable auxiliar (per calcular els pik)
Y<-base$ActComMinor ##Variable d'interés
N<-length(Y)
n<-50
pik<-inclusionprobabilities(X,n)
pik
head(pik)
sum(pik)
pik
sum(pik)
set.seed(47932295)
name<-base$ActComMinor
nme
name
View(base)
s <- UPtille(pik, eps = 1e-6)
s
as.vector(muninames[s==1])
as.vector(names[s==1])
as.vector(s)
PI <- UPsystematicpi2(pik) # nos dará un tamaño de la muestra segun la prob de inclusion
PI
as.vector(muninames[s==1])
s <- srswor(n,N)
s
P <- (1:N)[s==1]
P   # Individuos de mi muestra
s <- UPtille(pik, eps = 1e-6)
s
P <- (1:N)[s==1]
P
s <- UPsystematic(pik, eps = 1e-06)
s
muestra <- getdata(base,s)
muestra
y <- muestra$ActComMinor
y
totaly <- HTestimator(name[s == 1], pik[s == 1])
totaly
pik
Y
Yp = Y/pik
YP
Yp
Yp <- Y/pik
D <- P - pik%*%t(pik)
t
pik%*%t(pik)
P
D <- P - pik%*%t(pik)
Yp <- Y/pik
D
Vtotal <- t(Yp)%*%D%*%Yp
Vtotal <- Vtotal/2
Vtotal
Vtotal <- t(Yp)%*%D%*%Yp
Vtotal
Vtotal <- Vtotal/2
totaly
totaly + Votal
totaly + Vtotal
D <- P - pik%*%t(pik)
Yp <- Y/pik
Vtotal <- t(Yp)%*%D%*%Yp
Vtotal <- Vtotal/2
Vtotal
yp <- y/pik[s==1]
UN <- rep(1,n)
MMM <- (yp%*%t(UN)-UN%*%t(yp))^2
MMM2 <- (D/PI)[s==1,s==2]
VVV= MMM*MMM2
Vtotal_hat=sum(VVV)/2
MMM <- (yp%*%t(UN)-UN%*%t(yp))^2
Tpob <- sum(Y)		# Total
Mpob <- Tpob/N		# Media
Qvar <- var(Y)		# Cuasi-varianza
Vpob <- Qvar*(N-1)/N	# Varianza
yp <- y/pik[s==1]
UN <- rep(1,n)
MMM <- (yp%*%t(UN)-UN%*%t(yp))^2
MMM2 <- (D/PI)[s==1,s==2]
VVV= MMM*MMM2
Vtotal_hat=sum(VVV)/2
PI<-UPtillepi2(pik) #LOS PI ALFA,BETA
PI
PIKL<-PI
PIKL
PIKL <- UPtillepi2(pik) #LOS PI ALFA,BETA
pik <- inclusionprobabilities(X, n)
pik <- inclusionprobabilities(X, n)
pik # vector de probabilidades de inclusión de primer orden
name <- base$ActComMinor
s <- UPtille(pik, eps = 1e-6)
s
s <- UPsystematic(pik, eps = 1e-06)
s
as.vector(muninames[s==1])
D <- PI - pik %*% t(pik)  # Matriz delta (D)
Yp <- Y/pik # Vector poblacional Y/pik
Yp
ypm <- Yp[s == 1]  #ypm es Yp pero solo sobre la muestra
ypm
UN <- rep(1, n)
UN
sum(ypm) #es igual a totaly
totaly <- HTestimator(name[s == 1], pik[s == 1])
totaly
MMM <- (ypm %*% t(UN) - UN %*% t(ypm)) ^ 2
MMM
totaly <- HTestimator(name[s == 1], pik[s == 1])
totaly
# Estimación por intervalo: (UPtillepi2)
PIKL <- UPtillepi2(pik)
PIKL  #matriz de probabilidades de inclusión de seguno orden
PIKL[, pik == 1] <- pik
tPIKL <- t(PIKL)
tPIKL[, pik == 1] <- pik
PIKL <- t(tPIKL)
PI <- PIKL
PI
liminf <- totaly - 2*sqrt(Vhat)
limsup <- totaly + 2*sqrt(Vhat)
D <- PI - pik %*% t(pik)  # Matriz delta (D)
Yp <- Y/pik # Vector poblacional Y/pik
# Estimación de la varianza del estimador:
ypm <- Yp[s == 1]  # ypm es Yp pero solo sobre la muestra
sum(ypm) # igual al total
UN <- rep(1, n)
MMM <- (ypm %*% t(UN) - UN %*% t(ypm)) ^ 2
MMM2 <- (D/PI)[s == 1, s == 1]
VVV <- MMM * MMM2
Vhat <- sum(VVV)/2
Vhat
liminf <- totaly - 2*sqrt(Vhat)
MMM<-(ypm%*%t(UN)-UN%*%t(ypm))^2
MMM2<-(D/PI)[s==1,s==1]
VVV<-MMM*MMM2
Vhat<--sum(VVV)/2
Vhat
UN <- rep(1, n)
MMM <- (ypm %*% t(UN) - UN %*% t(ypm)) ^ 2
MMM2 <- (D/PI)[s == 1, s == 1]
VVV <- MMM * MMM2
Vhat <- sum(VVV)/2
Vhat
Vhat <- -sum(VVV)/2
Vhat
Vhat
liminf <- totaly - 2*sqrt(Vhat)
limsup <- totaly + 2*sqrt(Vhat)
liminf
limsup
Vexact <- t(Yp) %*% D %*% Yp
Vexact
Ymedia <- totaly/N
Vexactmed <- Vexact/(N*N)
Vhatmed <- Vhat/(N*N)
liminfmed <- Ymedia - 2*sqrt(Vhatmed)
limsupmed <- Ymedia + 2*sqrt(Vhatmed)
