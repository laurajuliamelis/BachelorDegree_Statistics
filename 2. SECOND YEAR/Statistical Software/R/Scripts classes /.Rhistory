u <- seq(5,100,5)
u
u[seq(from=2, to=length(u), by=2)] <- NULL
u[seq(from=2, to=length(u), by=2)] <- NA
u
w <- which(is.na(u))
w
w <- na.omit(u)
w
D <- matrix(rep(0,length(w)))
D
D <- matrix(rep(0,length(w)^2))
D
D <- matrix(rep(0,length(w)*length(w)))
D
D <- matrix(rep(0,length(w)*length(w), length(w)))
D
D <- matrix(rep(0,length(w), length(w)))
D
View(D)
u <- seq(5,100,5)
v <- 2^(1:20)
u[seq(from=2, to=length(u), by=2)] <- NA
w <- na.omit(u)
D <-diag(w)
D
w
solve(D)*D
det(D)
A <- matrix(rep(5,100), nrow=10)
A
row(A)
nrow(A)
col(A)
setwd("~/Estadística/Segon/Software Estadístic/Scripts classes ")
library(Hmisc)                  # To use function describe
install.packages('Hmisc')
install.packages("Hmisc")
library(Hmisc)                  # To use function describe
search()
head(states)
setwd("~/Estadística/Segon/Software Estadístic/Scripts classes ")
str(states)
load("ClasseR_Oct13.RData")
setwd("~/Estadística/Segon/Software Estadístic/Scripts classes ")
load("ClasseR_Oct13.RData")
load("~/Estadística/Segon/Software Estadístic/Scripts classes /Clase7/ClasseR_Oct13.RData")
ls()
str(states)
load("~/Estadística/Segon/Software Estadístic/Scripts classes /Clase7/ClasseR_Oct13.RData")
View(states)
quantile(states$inco)
quantile(states$inco, c(0.3, 0.9))
ls()
str(states)
mean(states)
mean(pop)
View(states)
load("ClasseR_Oct13.RData")
mean(states$pop)
median(state$pop)
median(states$pop)
sd(states$pop)
range(states$pop)
summary(states$pop)
quantile(states$inco)
quantile(states$inco, c(0.3, 0.9))
quantile(states$inco, 1:4/5)     # same as: quantile(states$inco, c(.2, .4, .6, .8))
table(states$reg)
summary(states$reg)    # Only meaningful if the variable is a factor!
library(Hmisc)
describe(states$reg)
install.packages("catspec")
library(catspec)
ctab(states$reg)
search()
install.packages("Epi")
library(Epi)
stat.table(list(reg), data = states)
stat.table(list(Region = reg), list(N = count(), "%" = percent(reg)),
stat.table(list(Region = reg), list(N = count(), "%" = percent(reg)),data = states, margins = T)
stat.table(list(Region = reg), list(N = count(), "%" = percent(reg),
stat.table(list(Region = reg), list(N = count(), "%" = percent(reg),"Av. income" = mean(inco)), data = states, margins = T)
stat.table(list(Region = reg), list(N = count(), "%" = percent(reg)),data = states, margins = T)
stat.table(list(reg), data = states)
search()
install.packages("descr")
library(descr)
freq(states$reg)
freq(states$reg, plot = F)
freq(states$reg)
freq(states$reg, plot = F)
reg <- states$reg
reg
reg[49:50] <- NA
reg
summary(reg)
ctab(reg, addmargins = T)
stat.table(list(Region = reg), list(N = count(), "%" = percent(reg)),
stat.table(list(Region = reg), list(N = count(), "%" = percent(reg)),margins = T)
freq(reg, plot = F)
stat.table(list(Region = reg), list(N = count(), "%" = percent(reg)),margins = T)
freq(reg, plot = F)
cut2(states$inco, c(4000, 4500, 5000))
states$inco2 <- cut2(states$inco, c(4000, 4500, 5000))
head(states)
summary(states)
levels(states$inco2)
levels(states$inco2)[c(1, 4)] <- c("< 4000", ">= 5000")
levels(states$inco2)
label(states$inco2) <- "Income"
units(states$inco2) <- "Dollar"
describe(states)
pop2 <- cut2(states$pop, quantile(states$pop, 1:3/4))
summary(pop2)
with(states, cor(murd, lifex))
with(states, cor(murd, lifex, method = "spearman"))
cor(states[1:8])
round(cor(states[1:8]), 3)
with(states, cor.test(inco, illi))
cormat <- round(cor(states[1:8]), 3)
cormat
max(abs(cormat)[cormat < 1])
cormat
cormat[1]
cormat[3]
cormat[cormat<1]
which(abs(cormat) == max(abs(cormat)[cormat < 1]), arr.ind = T)
which(abs(cormat) == max(abs(cormat)[cormat < 1]))
which(abs(cormat) == max(abs(cormat)[cormat < 1]),arr.ind=T)
with(states, table(reg, inco2))
tab <- with(states, table(reg, inco2))
tab
prop.table(tab)
round(prop.table(tab, 1)*100, 1)
with(states, ctab(reg, inco2))
with(states, ctab(reg, inco2, type = c("n", "r"), addmargins = T))
with(states, ctab(reg, inco2, type = c("n", "r")))
stat.table(list(Region = reg, Income = inco2), list(N = count(), "%" = percent(inco2)), data = states)
stat.table(list(Region = reg, Income = inco2), list(N = count(), "%" = percent(inco2)), data = states, margins = T)
with(states, CrossTable(reg, inco2))
with(states, CrossTable(reg, inco2))
tabla <- with(states, CrossTable(reg, inco2, prop.t = F, prop.c = F, prop.chisq = F, format = "SPSS", dnn = c("Region", "Income")))
str(tabla)
tabla
tabla$prop.row
with(states, tapply(lifex, reg, mean))
with(states, tapply(lifex, reg))
with(states, tapply(lifex, reg, mean))
with(states, tapply(lifex, inco2, summary))
with(states, tapply(lifex, reg, summary))
with(states, by(lifex, reg, mean))
with(states, by(lifex, inco2, summary))
with(states, by(states, reg, summary))
install.packages("doBy")
library(doBy)
summaryBy(lifex ~ reg, states, FUN = mean)
summaryBy(lifex ~ reg, states, FUN = c(mean, sd))
summaryBy(illi ~ reg + inco2, states, FUN = summary)
summaryBy(lifex + murd~reg, states, FUN = c(mean, sd))
sumby <- summaryBy(lifex ~ reg, states, FUN = c(mean, sd, median, min, max))
sumby
names(sumby) <- c("Region", "Mean", "St.Dev.", "Median", "Min.", "Max.")
print(sumby, digits = 3)
states$lifex[c(1, 50)] <- NA
with(states, tapply(lifex, reg, median))            # returns two missing values
with(states, tapply(lifex, reg, median, na.rm=T))
