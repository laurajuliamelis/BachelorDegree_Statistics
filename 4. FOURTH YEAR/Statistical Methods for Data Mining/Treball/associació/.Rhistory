summary(trans)
image(dtrans2)
dim(dtrans2)
image(dtrans2[sample(1:length(dtrans2),20)])
plot(size(dtrans2))
size(dtrans2)
size(Groceries)
size(dtrans)
View(dtrans)
View(dcat)
dtrans<-as(dcat[, -c(3,4,5)], "transactions")
size(dtrans)
plot(size(dtrans2))
transactionInfo(dtrans2[size(dtrans2) > 5])
transactionInfo(dtrans2[1:5])
inspect(dtrans2[1:10])
itemFrequencyPlot(Groceries, support=0.1, cex.names = 1)
itemFrequencyPlot(Groceries, support=0.05, cex.names = 1)
itemFrequencyPlot(dtrans, support=0.1, cex.names = 1)
itemFrequencyPlot(dtrans, support=0.15, cex.names = 1)
?apriori
rulesdtrans2 <- apriori(dtrans2, parameter = list(support = 0.1, confidence = 0.5,  minlen=1))
rulesEpub <- apriori(Epub, parameter = list(sup = 0.1, conf = 0.5, target="rules", minlen=1))
rulesGroceries <- apriori(Groceries, parameter = list(sup = 0.01, conf = 0.5,  minlen=2))
rulesGroceries <- apriori(Groceries, parameter = list(sup = 0.01, conf = 0.05,  maxlen=1))
rulesGroceries
summary(rulesGroceries)
rulesdtrans2 <- apriori(dtrans2, parameter = list(support = 0.1, confidence = 0.5,  minlen=1))
rules_output <- as(rules,data.frame)
rules_output <- as(rules,rulesdtrans)
rulesdtrans <- apriori(dtrans, parameter = list(sup = 0.01, conf = 0.05,  maxlen=1))
rulesdtrans
summary(rulesdtrans)
inspect(rulesdtrans)
data("Groceries")
mbarules<-apriori(Groceries, parameter = list (support=0.01, confidence=0.1, maxlen = 2))
inspect(head(mbarules,n=100, by="lift"))
inspect(head(mbarules,n=10, by="confidence"))
mbaitemsets<-apriori(Groceries, parameter = list (support=0.01, confidence=0.1, maxlen = 2, target="frequent itemsets"))
inspect(head(mbaitemsets,n=10, by="confidence"))
mbaitemsets<-apriori(Groceries, parameter = list (support=0.01, confidence=0.1, maxlen = 2, target="frequent itemsets"))
mbaitemsets
rulesdtrans <- apriori(dtrans, parameter = list(sup = 0.02, conf = 0.05,  maxlen=2))
inspect(head(rulesdtrans,n=20, by="confidence"))
rulesdtrans <- apriori(dtrans, parameter = list(sup = 0.02, conf = 0.05,  maxlen=5))
inspect(head(rulesdtrans,n=20, by="confidence"))
inspect(head(rulesdtrans,n=20, by="confidence"))
rulesdtrans <- apriori(dtrans, parameter = list(sup = 0.02, conf = 0.05,  maxlen=5))
inspect(head(rulesdtrans,n=20, by="confidence"))
install.packages("arules")
rulesdtrans <- apriori(dtrans, parameter = list(sup = 0.02, conf = 0.05,  maxlen=5))
#install.packages("arules")
library(arules)
dd <- read.table("Booking_data.csv",header=T, sep=",");
dcat<-dd[,sapply(dd, is.factor)] # Selecció de les variables categòriques
dtrans<-as(dcat, "transactions")# Transformación a transacciones
foo<-function(x){length(levels(x))}
sum(sapply(dcat, foo)) # suma de les categories que hi ha en tots els factors de la base de dades.
library(knitr)
kable(rbind (Hotel_name=length(levels(dcat$Hotel_Name)), Hotel_country=length(levels(dcat$Hotel_Country)),Hotel_City = length(levels(dcat$Hotel_City)), Businesses_100m= length(levels(dcat$Businesses_100m)), Businesses_1km=
length(levels(dcat$Businesses_1km)), Businesses_5km=
length(levels(dcat$Businesses_5km)), Room_Type_Level =
length(levels(dcat$Room_Type_Level)), Guest_Type =
length(levels(dcat$Guest_Type)), Trip_Type =
length(levels(dcat$Trip_Type)), Days_Since_Review =
length(levels(dcat$Days_Since_Review)), Reviewer_Nationality =
length(levels(dcat$Reviewer_Nationality)), Negative_Review =
length(levels(dcat$Negative_Review)),Positive_Review=
length(levels(dcat$Positive_Review)), TOTAL = sum(sapply(dcat, foo))), caption= "Nombre de nivells per categoria")
dtrans
inspect(head(dtrans,10))
summary(dtrans)
dim(dtrans)
image(dtrans)
# S'agafen només els caràcters numèrics (ara té el format "000 days")
dcat$Days_Since_Review_Num <- as.numeric(gsub("[^0-9]", "", dcat$Days_Since_Review ))
# Es fan els 5 grups:
for(i in 1:nrow(dcat)){
if(dcat$Days_Since_Review_Num[i]  <= 140){
dcat$Days_Since_Review_Cat[i]  <- "Menys de 141"
}
else if ((dcat$Days_Since_Review_Num[i]   > 140) & (dcat$Days_Since_Review_Num[i]   <= 280)){
dcat$Days_Since_Review_Cat[i]  <- "Entre 141 i 280"
}
else if ((dcat$Days_Since_Review_Num[i]   > 280) &  (dcat$Days_Since_Review_Num[i]   <= 420)){
dcat$Days_Since_Review_Cat[i]  <- "Entre 281 i 420"
}
else if ((dcat$Days_Since_Review_Num[i]   > 420) &  (dcat$Days_Since_Review_Num[i]   <= 560)){
dcat$Days_Since_Review_Cat[i]  <- "Entre 421 i 560"
}else{
dcat$Days_Since_Review_Cat[i]  <- "Més de 560"
}
}
dcat$Days_Since_Review_Cat <- as.factor(dcat$Days_Since_Review_Cat)
dcat$Days_Since_Review_Cat <- as.factor(dcat$Days_Since_Review_Cat)
dcat <- dcat[, -c(1,10,12,13,14)] # Eliminació de camps no necessaris
dtrans<-as(dcat, "transactions") # Transformació a transaccions
dtrans
inspect(head(dtrans,10))
summary(dtrans)
itemFrequencyPlot(dtrans, support=0.3, cex.names = 1, brewer.pal(8,'Pastel2'))
install.packages("RColorBrewer")
library(RColorBrewer)
summary(dtrans)
itemFrequencyPlot(dtrans, support=0.3, cex.names = 1, brewer.pal(8,'Pastel2'))
itemFrequencyPlot(dtrans, support=0.3, cex.names = 1, col= brewer.pal(8,'Pastel2'))
itemFrequencyPlot(dtrans, support=0.3, cex.names = 1, col= brewer.pal(8,'Blue2'))
itemFrequencyPlot(dtrans, support=0.3, cex.names = 1, col= brewer.pal(8,'Blue'))
itemFrequencyPlot(dtrans, support=0.3, cex.names = 1, col= brewer.pal(8,'Blue9'))
itemFrequencyPlot(dtrans, support=0.3, cex.names = 1, col= brewer.pal(8,'PuBu'))
itemFrequencyPlot(dtrans, support=0.3, cex.names = 1, col= brewer.pal(8,'Blues'))
itemFrequencyPlot(dtrans, support=0.3, cex.names = 1, col= brewer.pal(5,'Blues'))
itemFrequencyPlot(dtrans, support=0.3, cex.names = 1, col= brewer.pal(6,'Blues'))
itemFrequencyPlot(dtrans, support=0.3, cex.names = 1, col= brewer.pal(6,'Blues'))10```
itemFrequencyPlot(dtrans, support=0.3, cex.names = 1, col= brewer.pal(10,'Blues'))
image(dtrans,col = terrain.colors(100))
image(dtrans, col = terrain.colors(100))
image(dtrans, col = terrain.colors(10000))
image(dtrans)
data("Epub")
data("Groceries")
data("Adult")
#How to work with associations rules with data matrix
dd2 <- read.table("credscoClean.csv",header=T, sep=";");
#Seleccion de las variables categoricas
#dd22<-data.frame(iris,iris)
dcat2<-dd2[,sapply(dd2, is.factor)]
#transformamos a transacciones
dtrans2<-as(dcat2, "transactions")
#tendra tantas columnas como categorias
length(levels(dcat2$Dictamen))
#[1] 2
length(levels(dcat2$Vivienda))
#[1] 7
length(levels(dcat2$Estado.civil))
#[1] 6
length(levels(dcat2$Registros))
#[1] 2
length(levels(dcat2$Tipo.trabajo))
#[1] 5
foo<-function(x){length(levels(x))}
sum(sapply(dcat2, foo))
dtrans2
inspect(head(dtrans2,10))
summary(trans)
image(dtrans2)
dim(dtrans2)
image(dtrans2[sample(1:length(dtrans2),20)])
plot(size(dtrans2))
plot(size(Groceries))
transactionInfo(dtrans2[size(dtrans2) > 5])
transactionInfo(dtrans2[1:5])
transactionInfo(Epub[1:10])
transactionInfo(Groceries[1:10])
nt <- which(size(Groceries) > 20)
inspect(Groceries[nt])
inspect(dtrans2[1:10])
itemFrequencyPlot(dtrans, support=0.15, cex.names = 1)
itemFrequencyPlot(Groceries, support=0.05, cex.names = 1)
#Apriori
?apriori
#minlen : minimo numero de items, cuando el target = "rules" only right part
rulesdtrans2 <- apriori(dtrans2, parameter = list(support = 0.1, confidence = 0.5,  minlen=1))
rulesEpub <- apriori(Epub, parameter = list(sup = 0.1, conf = 0.5, target="rules", minlen=1))
rulesGroceries <- apriori(Groceries, parameter = list(sup = 0.01, conf = 0.5,  minlen=2))
rulesGroceries <- apriori(Groceries, parameter = list(sup = 0.01, conf = 0.05,  maxlen=1))
rulesGroceries
summary(rulesGroceries)
inspect(rulesGroceries)
items<-apriori(dtrans2, parameter = list(sup = 0.2,  target="frequent itemsets", minlen=2))
inspect(items)
rules_output <- as(rules,data.frame)
#param ext
rulesdtrans2 <- apriori(dtrans2, parameter = list(support = 0.4, confidence = 0.8,  minlen=2, ext=TRUE))
inspect(rulesdtrans2)
inspect(head(rulesdtrans2,n=10, by="lift"))
data("Groceries")
mbarules<-apriori(Groceries, parameter = list (support=0.01, confidence=0.1, maxlen = 2))
inspect(head(mbarules,n=100, by="lift"))
inspect(head(mbarules,n=10, by="confidence"))
mbaitemsets<-apriori(Groceries, parameter = list (support=0.01, confidence=0.1, maxlen = 2, target="frequent itemsets"))
inspect(head(mbaitemsets,n=10, by="confidence"))
eclatdtrans2<-eclat(dtrans2)
eclatdtrans2
mbaeclat<-eclat(Groceries)
inspect(mbaeclat)
eclatdtrans2 <- eclat(dtrans, parameter = list(supp = 0.5))
inspect(eclatdtrans2)
top5 <- sort(eclatdtrans2)[1:5]
## Mine frequent itemsets with Eclat.
eclatdtrans2 <- eclat(dtrans2, parameter = list(supp = 0.5))
## Display the 5 itemsets with the highest support.
orderedItemsets <- sort(eclatdtrans2)
inspect(orderedItemsets)
top5 <- sort(eclatdtrans2)[1:5]
inspect(top5)
top5 <- sort(eclatdtrans2)[1:3]
inspect(top5)
inspect(eclatdtrans2)
eclatdtrans2 <- eclat(dtrans, parameter = list(supp = 0.5))
inspect(eclatdtrans2)
inspect(top5)
inspect(eclatdtrans2)
## Get the itemsets as a list
as(items(eclatdtrans2), "list")
## Get the itemsets as a binary matrix
as(items(eclatdtrans2), "matrix")
## Get the itemsets as a binary matrix
as(items(eclatdtrans2), "matrix")
## Get the itemsets as a sparse matrix, a ngCMatrix from package Matrix.
## Warning: for efficiency reasons, the ngCMatrix you get is transposed
as(items(eclatdtrans2), "ngCMatrix")
install.packages("arulesViz")
library(arulesViz)
library(arulesViz)
plot(eclatdtrans2)
## Display the 5 itemsets with the highest support.
orderedItemsets <- sort(eclatdtrans2)
inspect(orderedItemsets)
top5 <- sort(eclatdtrans2)[1:5]
inspect(top5)
## Get the itemsets as a list
as(items(top5), "list")
## Get the itemsets as a sparse matrix, a ngCMatrix from package Matrix.
## Warning: for efficiency reasons, the ngCMatrix you get is transposed
as(items(top5), "ngCMatrix")
plot(top5)
plot(mbaeclat)
plot(mbaeclat, method = "paracoord")
plot(mbaeclat, method = "graph")
plot(eclatdtrans2, method="graph")
plot(eclatdtrans2, method="graph")
plot(eclatdtrans, method="graph")
eclatdtrans<-eclat(dtrans, parameter = list(support=0.4, minlen=1, maxlen=5))
inspect(eclatdtrans)
plot(eclatdtrans, method="graph")
plot(mbaeclat)
plot(mbaeclat, method = "paracoord")
plot(mbaeclat, method = "graph")
install.packages("arules")
dd <- read.table("Booking_data_preprocessada.csv",header=T, sep=",");
#install.packages("arules")
library(arules)
dcat<-dd[,sapply(dd, is.factor)] # Selecció de les variables categòriques
dtrans<-as(dcat, "transactions")# Transformación a transacciones
foo<-function(x){length(levels(x))}
sum(sapply(dcat, foo)) # suma de les categories que hi ha en tots els factors de la base de dades.
View(dcat)
library(knitr)
kable(rbind (Hotel_name=length(levels(dcat$Hotel_Name)), Hotel_country=length(levels(dcat$Hotel_Country)),Hotel_City = length(levels(dcat$Hotel_City)), Room_Type_Level =
length(levels(dcat$Room_Type_Level)), Guest_Type =
length(levels(dcat$Guest_Type)), Trip_Type =
length(levels(dcat$Trip_Type)), Review_Date =
length(levels(dcat$Review_Date)), Is_Hotel_Holiday = length(levels(dcat$Is_Hotel_Holiday)), Is_Reviewer_Holiday = length(levels(dcat$Is_Reviewer_Holiday)),Review_Is_Positive =length(levels(dcat$Review_Is_Positive)), Reviewer_Nationality =
length(levels(dcat$Reviewer_Nationality)), Submitted_from_Mobile =length(levels(dcat$Submitted_from_Mobile)), TOTAL = sum(sapply(dcat, foo))), caption= "Nombre de nivells per categoria")
dtrans
inspect(head(dtrans,10))
summary(dtrans)
dim(dtrans)
image(dtrans)
as.Date(dcat$Review_Date)
View(dcat)
dcat$Review_Date <- as.Date(dcat$Review_Date)
dd <- read.table("Booking_data_preprocessada.csv",header=T, sep=",");
dcat<-dd[,sapply(dd, is.factor)] # Selecció de les variables categòriques
dcat$Review_Date <- as.Date(dcat$Review_Date)
dtrans<-as(dcat, "transactions")# Transformación a transacciones
dcat<-dd[,sapply(dd, is.factor)] # Selecció de les variables categòriques
dtrans<-as(dcat, "transactions")# Transformación a transacciones
foo<-function(x){length(levels(x))}
sum(sapply(dcat, foo)) # suma de les categories que hi ha en tots els factors de la base de dades.
library(knitr)
kable(rbind (Hotel_name=length(levels(dcat$Hotel_Name)), Hotel_country=length(levels(dcat$Hotel_Country)),Hotel_City = length(levels(dcat$Hotel_City)), Room_Type_Level =
length(levels(dcat$Room_Type_Level)), Guest_Type =
length(levels(dcat$Guest_Type)), Trip_Type =
length(levels(dcat$Trip_Type)), Review_Date =
length(levels(dcat$Review_Date)), Is_Hotel_Holiday = length(levels(dcat$Is_Hotel_Holiday)), Is_Reviewer_Holiday = length(levels(dcat$Is_Reviewer_Holiday)),Review_Is_Positive =length(levels(dcat$Review_Is_Positive)), Reviewer_Nationality =
length(levels(dcat$Reviewer_Nationality)), Submitted_from_Mobile =length(levels(dcat$Submitted_from_Mobile)), TOTAL = sum(sapply(dcat, foo))), caption= "Nombre de nivells per categoria")
# S'agafen només els caràcters numèrics (ara té el format "000 days")
dcat$Review_Date <- as.Date(dcat$Review_Date)
max(dcat$Review_Date)
min(dcat$Review_Date)
dcat$Review_Date_Year <- substring(dcat$Review_Date,1,4)
View(dcat)
dcat <- dcat$Review_Date <- NULL
dd <- read.table("Booking_data_preprocessada.csv",header=T, sep=",");
dcat<-dd[,sapply(dd, is.factor)] # Selecció de les variables categòriques
dtrans<-as(dcat, "transactions")# Transformación a transacciones
foo<-function(x){length(levels(x))}
sum(sapply(dcat, foo)) # suma de les categories que hi ha en tots els factors de la base de dades.
library(knitr)
kable(rbind (Hotel_name=length(levels(dcat$Hotel_Name)), Hotel_country=length(levels(dcat$Hotel_Country)),Hotel_City = length(levels(dcat$Hotel_City)), Room_Type_Level =
length(levels(dcat$Room_Type_Level)), Guest_Type =
length(levels(dcat$Guest_Type)), Trip_Type =
length(levels(dcat$Trip_Type)), Review_Date =
length(levels(dcat$Review_Date)), Is_Hotel_Holiday = length(levels(dcat$Is_Hotel_Holiday)), Is_Reviewer_Holiday = length(levels(dcat$Is_Reviewer_Holiday)),Review_Is_Positive =length(levels(dcat$Review_Is_Positive)), Reviewer_Nationality =
length(levels(dcat$Reviewer_Nationality)), Submitted_from_Mobile =length(levels(dcat$Submitted_from_Mobile)), TOTAL = sum(sapply(dcat, foo))), caption= "Nombre de nivells per categoria")
dtrans
inspect(head(dtrans,10))
summary(dtrans)
dim(dtrans)
image(dtrans)
# S'agafen només els caràcters numèrics (ara té el format "000 days")
dcat$Review_Date_Year <- substring(dcat$Review_Date,1,4)
dcat$Review_Date <- NULL
# S'agafen només els caràcters numèrics (ara té el format "000 days")
dcat$Review_Date_Year <- as.factor(substring(dcat$Review_Date,1,4))
# Es fan els 5 grups:
for(i in 1:nrow(dcat)){
if(dcat$Review_Date_Year[i]  == "2015"){
dcat$Review_Year[i]  <- "2015"
}
else if (dcat$Review_Date_Year[i]  == "2016"){
dcat$Review_Year[i]  <- "2016"
}else{
dcat$Review_Year[i]  <- "2017"
}
}
dcat$Review_Year <- as.factor(dcat$Review_Year)
dcat<-dd[,sapply(dd, is.factor)] # Selecció de les variables categòriques
# S'agafen només els caràcters numèrics (ara té el format "000 days")
dcat$Review_Date_Year <- as.factor(substring(dcat$Review_Date,1,4))
dcat$Review_Date <- NULL
dtrans<-as(dcat, "transactions") # Transformació a transaccions
dtrans
inspect(head(dtrans,10))
dim(dtrans)
summary(dtrans)
image(dtrans[sample(1:length(dtrans),100)])
kable(rbind (Hotel_name=length(levels(dcat$Hotel_Name)), Hotel_country=length(levels(dcat$Hotel_Country)),Hotel_City = length(levels(dcat$Hotel_City)), Room_Type_Level =
length(levels(dcat$Room_Type_Level)), Guest_Type =
length(levels(dcat$Guest_Type)), Trip_Type =
length(levels(dcat$Trip_Type)), Is_Hotel_Holiday = length(levels(dcat$Is_Hotel_Holiday)), Is_Reviewer_Holiday = length(levels(dcat$Is_Reviewer_Holiday)),Review_Is_Positive = length(levels(dcat$Review_Is_Positive)), Reviewer_Nationality =
length(levels(dcat$Reviewer_Nationality)), Submitted_from_Mobile = length(levels(dcat$Submitted_from_Mobile)), Review_date_year = length(levels(dcat$Review_Date_Year)), TOTAL = sum(sapply(dcat, foo))), caption= "Nombre de nivells per categoria en la nova base de dades")
# Eliminació de camps no necessaris
dcat$Review_Date <- NULL
dcat$Hotel_Name <- NULL
dtrans<-as(dcat, "transactions") # Transformació a transaccions
summary(dtrans)
image(dtrans[sample(1:length(dtrans),100)])
kable(rbind (Hotel_name=length(levels(dcat$Hotel_Name)), Hotel_country=length(levels(dcat$Hotel_Country)),Hotel_City = length(levels(dcat$Hotel_City)), Room_Type_Level =
length(levels(dcat$Room_Type_Level)), Guest_Type =
length(levels(dcat$Guest_Type)), Trip_Type =
length(levels(dcat$Trip_Type)), Is_Hotel_Holiday = length(levels(dcat$Is_Hotel_Holiday)), Is_Reviewer_Holiday = length(levels(dcat$Is_Reviewer_Holiday)),Review_Is_Positive = length(levels(dcat$Review_Is_Positive)), Reviewer_Nationality =
length(levels(dcat$Reviewer_Nationality)), Submitted_from_Mobile = length(levels(dcat$Submitted_from_Mobile)), Review_date_year = length(levels(dcat$Review_Date_Year)), TOTAL = sum(sapply(dcat, foo))), caption= "Nombre de nivells per categoria en la nova base de dades")
kable(rbind (Hotel_country=length(levels(dcat$Hotel_Country)),Hotel_City = length(levels(dcat$Hotel_City)), Room_Type_Level =
length(levels(dcat$Room_Type_Level)), Guest_Type =
length(levels(dcat$Guest_Type)), Trip_Type =
length(levels(dcat$Trip_Type)), Is_Hotel_Holiday = length(levels(dcat$Is_Hotel_Holiday)), Is_Reviewer_Holiday = length(levels(dcat$Is_Reviewer_Holiday)),Review_Is_Positive = length(levels(dcat$Review_Is_Positive)), Reviewer_Nationality =
length(levels(dcat$Reviewer_Nationality)), Submitted_from_Mobile = length(levels(dcat$Submitted_from_Mobile)), Review_date_year = length(levels(dcat$Review_Date_Year)), TOTAL = sum(sapply(dcat, foo))), caption= "Nombre de nivells per categoria en la nova base de dades")
6+8+7+5+6+2+2+2
kable(cbind( "Nombre de categories"= rbind (Hotel_country=length(levels(dcat$Hotel_Country)),Hotel_City = length(levels(dcat$Hotel_City)), Room_Type_Level =
length(levels(dcat$Room_Type_Level)), Guest_Type =
length(levels(dcat$Guest_Type)), Trip_Type =
length(levels(dcat$Trip_Type)), Is_Hotel_Holiday = length(levels(dcat$Is_Hotel_Holiday)), Is_Reviewer_Holiday = length(levels(dcat$Is_Reviewer_Holiday)),Review_Is_Positive = length(levels(dcat$Review_Is_Positive)), Reviewer_Nationality =
length(levels(dcat$Reviewer_Nationality)), Submitted_from_Mobile = length(levels(dcat$Submitted_from_Mobile)), Review_date_year = length(levels(dcat$Review_Date_Year)), TOTAL = sum(sapply(dcat, foo))), caption= "Nombre de nivells per categoria en la nova base de dades"), "Acumulat"=c(6,22,40,47,54,177,182,"-")))
kable(rbind (Hotel_country=length(levels(dcat$Hotel_Country)),Hotel_City = length(levels(dcat$Hotel_City)), Room_Type_Level =
length(levels(dcat$Room_Type_Level)), Guest_Type =
length(levels(dcat$Guest_Type)), Trip_Type =
length(levels(dcat$Trip_Type)), Is_Hotel_Holiday = length(levels(dcat$Is_Hotel_Holiday)), Is_Reviewer_Holiday = length(levels(dcat$Is_Reviewer_Holiday)),Review_Is_Positive = length(levels(dcat$Review_Is_Positive)), Reviewer_Nationality =
length(levels(dcat$Reviewer_Nationality)), Submitted_from_Mobile = length(levels(dcat$Submitted_from_Mobile)), Review_date_year = length(levels(dcat$Review_Date_Year)), TOTAL = sum(sapply(dcat, foo))), caption= "Nombre de nivells per categoria en la nova base de dades")
6+8
6+8+7
6+8+7+5
6+8+7+5+6
6+8+7+5+6+2
6+8+7+5+6+2+2
6+8+7+5+6+2+2+2
6+8+7+5+6+2+2+2+123
kable(cbind( "Nombre de categories"= rbind (Hotel_country=length(levels(dcat$Hotel_Country)),Hotel_City = length(levels(dcat$Hotel_City)), Room_Type_Level =
length(levels(dcat$Room_Type_Level)), Guest_Type =
length(levels(dcat$Guest_Type)), Trip_Type =
length(levels(dcat$Trip_Type)), Is_Hotel_Holiday = length(levels(dcat$Is_Hotel_Holiday)), Is_Reviewer_Holiday = length(levels(dcat$Is_Reviewer_Holiday)),Review_Is_Positive = length(levels(dcat$Review_Is_Positive)), Reviewer_Nationality =
length(levels(dcat$Reviewer_Nationality)), Submitted_from_Mobile = length(levels(dcat$Submitted_from_Mobile)), Review_date_year = length(levels(dcat$Review_Date_Year)), TOTAL = sum(sapply(dcat, foo))), caption= "Nombre de nivells per categoria en la nova base de dades"), "Acumulat"=c(6,14,21,26,32,34,36,38,161,163,166,"-")))
kable(cbind( "Nombre de categories"= rbind (Hotel_country=length(levels(dcat$Hotel_Country)),Hotel_City = length(levels(dcat$Hotel_City)), Room_Type_Level =
length(levels(dcat$Room_Type_Level)), Guest_Type =
length(levels(dcat$Guest_Type)), Trip_Type =
length(levels(dcat$Trip_Type)), Is_Hotel_Holiday = length(levels(dcat$Is_Hotel_Holiday)), Is_Reviewer_Holiday = length(levels(dcat$Is_Reviewer_Holiday)),Review_Is_Positive = length(levels(dcat$Review_Is_Positive)), Reviewer_Nationality =
length(levels(dcat$Reviewer_Nationality)), Submitted_from_Mobile = length(levels(dcat$Submitted_from_Mobile)), Review_date_year = length(levels(dcat$Review_Date_Year)), TOTAL = sum(sapply(dcat, foo))), caption= "Nombre de nivells per categoria en la nova base de dades"), "Acumulat"=c(6,14,21,26,32,34,36,38,161,163,166,"-")))
kable(cbind( "Nombre de categories"= rbind (Hotel_country=length(levels(dcat$Hotel_Country)),Hotel_City = length(levels(dcat$Hotel_City)), Room_Type_Level =
length(levels(dcat$Room_Type_Level)), Guest_Type =
length(levels(dcat$Guest_Type)), Trip_Type =
length(levels(dcat$Trip_Type)), Is_Hotel_Holiday = length(levels(dcat$Is_Hotel_Holiday)), Is_Reviewer_Holiday = length(levels(dcat$Is_Reviewer_Holiday)),Review_Is_Positive = length(levels(dcat$Review_Is_Positive)), Reviewer_Nationality =
length(levels(dcat$Reviewer_Nationality)), Submitted_from_Mobile = length(levels(dcat$Submitted_from_Mobile)), Review_date_year = length(levels(dcat$Review_Date_Year)), TOTAL = sum(sapply(dcat, foo))), caption= "Nombre de nivells per categoria en la nova base de dades"), "Acumulat"=c(6,14,21,26,32,34,36,38,161,163,166,"-"))
kable(cbind( "Nombre de categories"= rbind (Hotel_country=length(levels(dcat$Hotel_Country)),Hotel_City = length(levels(dcat$Hotel_City)), Room_Type_Level =
length(levels(dcat$Room_Type_Level)), Guest_Type =
length(levels(dcat$Guest_Type)), Trip_Type =
length(levels(dcat$Trip_Type)), Is_Hotel_Holiday = length(levels(dcat$Is_Hotel_Holiday)), Is_Reviewer_Holiday = length(levels(dcat$Is_Reviewer_Holiday)),Review_Is_Positive = length(levels(dcat$Review_Is_Positive)), Reviewer_Nationality =
length(levels(dcat$Reviewer_Nationality)), Submitted_from_Mobile = length(levels(dcat$Submitted_from_Mobile)), Review_date_year = length(levels(dcat$Review_Date_Year)), TOTAL = sum(sapply(dcat, foo))), "Acumulat"=c(6,14,21,26,32,34,36,38,161,163,166,"-"))
kable(cbind( "Nombre de categories"= rbind (Hotel_country=length(levels(dcat$Hotel_Country)),Hotel_City = length(levels(dcat$Hotel_City)), Room_Type_Level =
length(levels(dcat$Room_Type_Level)), Guest_Type =
length(levels(dcat$Guest_Type)), Trip_Type =
length(levels(dcat$Trip_Type)), Is_Hotel_Holiday = length(levels(dcat$Is_Hotel_Holiday)), Is_Reviewer_Holiday = length(levels(dcat$Is_Reviewer_Holiday)),Review_Is_Positive = length(levels(dcat$Review_Is_Positive)), Reviewer_Nationality =
length(levels(dcat$Reviewer_Nationality)), Submitted_from_Mobile = length(levels(dcat$Submitted_from_Mobile)), Review_date_year = length(levels(dcat$Review_Date_Year)), TOTAL = sum(sapply(dcat, foo))), "Acumulat"=c(6,14,21,26,32,34,36,38,161,163,166,"-")))
kable(cbind( "Nombre de categories"= rbind (Hotel_country=length(levels(dcat$Hotel_Country)),Hotel_City = length(levels(dcat$Hotel_City)), Room_Type_Level =
length(levels(dcat$Room_Type_Level)), Guest_Type =
length(levels(dcat$Guest_Type)), Trip_Type =
length(levels(dcat$Trip_Type)), Is_Hotel_Holiday = length(levels(dcat$Is_Hotel_Holiday)), Is_Reviewer_Holiday = length(levels(dcat$Is_Reviewer_Holiday)),Review_Is_Positive = length(levels(dcat$Review_Is_Positive)), Reviewer_Nationality =
length(levels(dcat$Reviewer_Nationality)), Submitted_from_Mobile = length(levels(dcat$Submitted_from_Mobile)), Review_date_year = length(levels(dcat$Review_Date_Year)), TOTAL = sum(sapply(dcat, foo))), "Acumulat"=c(6,14,21,26,32,34,36,38,161,163,166,"-")))
levels(dcat$Hotel_Country)[3]
11-6
levels(dcat$Hotel_City)[5]
levels(dcat$Hotel_City)
library(RColorBrewer)
summary(dtrans)
itemFrequencyPlot(dtrans, support=0.3, cex.names = 1, col= brewer.pal(10,'Blues'))
install.packages("arules")
library(arulesViz)
install.packages("arulesçViz")
install.packages("arulesViz")
#install.packages("arules")
library(arules)
dd <- read.table("Booking_data_preprocessada.csv",header=T, sep=",");
dcat<-dd[,sapply(dd, is.factor)] # Selecció de les variables categòriques
dtrans<-as(dcat, "transactions")# Transformación a transacciones
foo<-function(x){length(levels(x))}
sum(sapply(dcat, foo)) # suma de les categories que hi ha en tots els factors de la base de dades.
library(knitr)
kable(rbind (Hotel_name=length(levels(dcat$Hotel_Name)), Hotel_country=length(levels(dcat$Hotel_Country)),Hotel_City = length(levels(dcat$Hotel_City)), Room_Type_Level =
length(levels(dcat$Room_Type_Level)), Guest_Type =
length(levels(dcat$Guest_Type)), Trip_Type =
length(levels(dcat$Trip_Type)), Review_Date =
length(levels(dcat$Review_Date)), Is_Hotel_Holiday = length(levels(dcat$Is_Hotel_Holiday)), Is_Reviewer_Holiday = length(levels(dcat$Is_Reviewer_Holiday)),Review_Is_Positive =length(levels(dcat$Review_Is_Positive)), Reviewer_Nationality =
length(levels(dcat$Reviewer_Nationality)), Submitted_from_Mobile =length(levels(dcat$Submitted_from_Mobile)), TOTAL = sum(sapply(dcat, foo))), caption= "Nombre de nivells per categoria")
dtrans
inspect(head(dtrans,10))
summary(dtrans)
dim(dtrans)
image(dtrans)
dcat$Review_Date_Year <- as.factor(substring(dcat$Review_Date,1,4)) # Deixem només l'any
# Eliminació de camps no necessaris
dcat$Review_Date <- NULL
dcat$Hotel_Name <- NULL
dtrans<-as(dcat, "transactions") # Transformació a transaccions
dtrans
summary(dtrans)
dim(dtrans)
summary(dtrans)
dim(dtrans)
image(dtrans[sample(1:length(dtrans),100)])
kable(cbind( "Nombre de categories"= rbind (Hotel_country=length(levels(dcat$Hotel_Country)),Hotel_City = length(levels(dcat$Hotel_City)), Room_Type_Level =
length(levels(dcat$Room_Type_Level)), Guest_Type =
length(levels(dcat$Guest_Type)), Trip_Type =
length(levels(dcat$Trip_Type)), Is_Hotel_Holiday = length(levels(dcat$Is_Hotel_Holiday)), Is_Reviewer_Holiday = length(levels(dcat$Is_Reviewer_Holiday)),Review_Is_Positive = length(levels(dcat$Review_Is_Positive)), Reviewer_Nationality =
length(levels(dcat$Reviewer_Nationality)), Submitted_from_Mobile = length(levels(dcat$Submitted_from_Mobile)), Review_date_year = length(levels(dcat$Review_Date_Year)), TOTAL = sum(sapply(dcat, foo))), "Acumulat"=c(6,14,21,26,32,34,36,38,161,163,166,"-")))
levels(dcat$Hotel_City)[5]
levels(dcat$Hotel_Country)[3]
library(RColorBrewer)
summary(dtrans)
itemFrequencyPlot(dtrans, support=0.3, cex.names = 1, col= 'lightsteelblue')
View(dd)
View(dcat)
levels(dcat$Hotel_City)[5]
levels(dcat$Hotel_Country)[3]
image(dtrans[sample(1:length(dtrans),100)])
levels(dcat$Hotel_Country)
levels(dcat$Hotel_Country)[4]
levels(dcat$Hotel_City)
levels(dcat$Hotel_City)[4]
levels(dcat$Hotel_Country)[4]
levels(dcat$Hotel_City)[4]
rulesdtrans <- apriori(dtrans, parameter = list(sup = 0.02, conf = 0.05,  maxlen=5))
inspect(head(rulesdtrans,n=20, by="confidence"))
View(dcat)
View(dd)
x <- matrix(rnorm(20*2), ncol = 2)
y <- c(rep(-1,10), rep(1,10))
x[y==1,] <- x[y==1,] + 3/2
dat <- data.frame(x=x, y=as.factor(y))
dat
inspect(head(rulesdtrans,n=15, by="confidence"))
rulesdtrans <- apriori(dtrans, parameter = list(sup = 0.01, conf = 0.05,  maxlen=5))
inspect(head(rulesdtrans,n=20, by="lift"))
inspect(head(rulesdtrans,n=15, by="lift"))
rulesdtrans <- apriori(dtrans, parameter = list(sup = 0.02, conf = 0.05,  maxlen=5))
inspect(head(rulesdtrans,n=15, by="support"))
inspect(head(rulesdtrans,n=10, by="support"))
eclatdtrans<-eclat(dtrans, parameter = list(support=0.4, minlen=1, maxlen=5))
inspect(eclatdtrans)
inspect(eclatdtrans)
inspect(head(eclatdtrans,n=10))
inspect(head(eclatdtrans,n=10, by="count"))
inspect(head(eclatdtrans,n=15, by="count"))
inspect(head(eclatdtrans,n=10, by="count"))
inspect(head(eclatdtrans,n=12, by="count"))
inspect(head(eclatdtrans,n=13, by="count"))
inspect(head(eclatdtrans,n=14, by="count"))
inspect(head(eclatdtrans,n=15, by="count"))
inspect(head(eclatdtrans,n=14, by="count"))
eclatdtrans<-eclat(dtrans, parameter = list(support=0.4, minlen=1, maxlen=5))
inspect(head(eclatdtrans,n=14, by="count"))
inspect(head(eclatdtrans,n=14, by="support"))
inspect(head(eclatdtrans,n=14, by="support"))
eclatdtrans2 <- eclat(dtrans, parameter = list(supp = 0.5))
inspect(head(eclatdtrans2,n=14, by="support"))
as(items(eclatdtrans2), "list") ## Get the itemsets as a list
inspect(head(eclatdtrans2,n=14, by="support"))
as(items(eclatdtrans2), "list") ## Get the itemsets as a list
plot(eclatdtrans, method="graph")
library(arulesViz)
plot(eclatdtrans, method="graph")
plot(eclatdtrans, method="graph", control=list(alpha=.5, reorder=TRUE))
plot(eclatdtrans, method="graph", control=list(alpha=.7, reorder=TRUE))
plot(eclatdtrans, method="graph", control=list(alpha=.9, reorder=TRUE))
plot(eclatdtrans, method="graph")
library(arulesViz)
plot(eclatdtrans, method="graph")
plot(head(eclatdtrans,n=14, by="support"), method="graph")
plot(eclatdtrans, method="graph")
image(dtrans)
plot(eclatdtrans, method="graph")
plot(head(eclatdtrans,n=14, by="support"), method="graph")
