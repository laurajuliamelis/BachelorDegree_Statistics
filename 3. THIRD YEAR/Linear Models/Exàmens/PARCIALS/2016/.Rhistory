RSS   <- sum(resid^2)  # Residual Sum of Squares
MSE   <- RSS/(n-r)     # ECM = RSS/(6-2) (sigma^2)
a <- c(1, 0, 1) # a'beta = (1,0,1) *(alpha, beta, gamma)
b <- c(0, 1, 1) # b'beta = (0,1,1) *(alpha, beta, gamma)
cov <- MSE * t(a) %*% xtxi %*% b
cov
var <- MSE * t(a) %*% xtxi %*% a
var
n
r
se <- sqrt(var)
(betas[1]+betas[3]) + c(-1,1) * (qt(p = 0.975, df = n-r) * se)
t.est <- as.numeric((sum(betas[c(1,3)]) - 4)/sqrt(var))
(pt(t.est, df= 6 - 2, lower.tail = F) * 2)  #p-valor
A <-c(1,0,1)
num<- t(A) %*% ((sum(betas[c(1,3)]) -4)
)
num<- t(A) %*% ((sum(betas[c(1,3)]) - 4)
)
num<- t(A) %*% ((sum(betas[c(1,3)]) - 4))
num<- t(A) %*% (betas[c(1,3)] - 4))
num<- t(A) %*% (betas[c(1,3)] - 4)
num<- t(A) * (betas[c(1,3)] - 4)
num<- t(A) %*% (betas-4)
num
den <- sqrt(var)
t <-num/den
t
(pt(t, df= n - r, lower.tail = F) * 2)
num<- t(A) %*% (betas[c(1,3)]-4)
num<- t(A) %*% (sum(betas[c(1,3)])-4)
sum(betas[c(1,3)])
sum<- sum(betas[c(1,3)])
num<- t(A) %*% (sum-4)
num<- t(A) * (sum-4)
num
t <-num/den
num<- t(A) %*% (sum(betas[c(1,3)])-4)
betas
betas-4
t.est <- as.numeric((sum(betas[c(1,3)]) - 4)/sqrt(var)
t.est <- as.numeric((sum(betas[c(1,3)]) - 4)/sqrt(var))
t.est <- as.numeric((sum(betas[c(1,3)]) - 4)/sqrt(var))
(pt(t.est, df= n - r, lower.tail = F) * 2)  #p-valor
t.est <- (sum(betas[c(1,3)]) - 4)/sqrt(var)
(pt(t.est, df= n - r, lower.tail = F) * 2)  #p-valor
var
varA
var
MSE*xtxi
mm <-MSE*xtxi
A <- c(1,0,1,
0,1,1)
A <- matrix(A, ncol=3, byrow=T)
qr(A)$rank
Abetas <- A %*% betas - c(4,3) # c(4,3): valors despres de la igualtat
atai <- solve (A %*% xtxi %*% t(A))
num <- t(Abetas) %*% atai %*% (Abetas/2)
F.est <- num / MSE
(p.value <- pf(F.est, df1= 2, df2= n-r, lower.tail = F)) # Com que p valor= 0.899 > 0.05, es clar que acceptem la hipotesi nulla.
Abetas <- A%*% betas - c(4,3) # c(4,3): valors despres de la igualtat
atai <- solve (A %*% xtxi %*% t(A))
num <- t(Abetas) %*% atai %*% (Abetas/2)
F.est <- num / MSE
(p.value <- pf(F.est, df1= 2, df2= n-r, lower.tail = F))
load("longnose.Rdata")
str(Data)
with(Data, plot(Longnose, DO3))
View(Data)
with(Data, plot(Longnose, D03))
with(Data, plot(Longnose, Temp))
plot(Data$Longnose, Data$Temp)
g <- lm(Longnose ~ Temp, data=Data)
g
with(Data, plot(Longnose, Temp))
abline(g)
plot(g, which=1)
plot(g)
plot(g, which=1)
g <- lm(Longnose ~ Temp, data=Data)
with(Data, plot(Longnose, Temp))
abline(g)
#Analisi grafica dels residus:
plot(g, which=1)
which(rownames(Longnose) == "BIG_ELK_CR")
library(moments)
install.packages("moments")
library(moments)
agostino.test(Data$Longnose)
shapiro.test(Data$Longnose) #p-valor < 0.05, les dades son normals
qqnorm(Data$Longnose)
qqline(Data$Longnose) # Per a que surti la linea a comparar
# Num?ricament: amb el test de shapiro
shapiro.test(Data$Longnose) #p-valor < 0.05, les dades son normals
# Amb el test suggerit:
library(moments)
agostino.test(Data$Longnose)
hist(Data$Longnose)
curve(density(Data$Longnose))
density(Data$Longnose)
lines(density(Data$Longnose))
hist(Data$Longnose)
lines(density(Data$Longnose))
hist(Data$Longnose)
curve(density(Data$Longnose), add=T)
curve(density,Data$Longnose add=T)
curve(density,Data$Longnose, add=T)
curve(density(Longnose),Data, add=T)
curve(Data,density(Longnose), add=T)
curve(Data,density(Data$Longnose), add=T)
x
dnorm(x)
hist(x)
curve(dnorm(x), add=T)
density(Data$Longnose)
density=Data$Longnose
curve(Data,density=Data$Longnose, add=T)
hist(Data$Longnose)
curve(Data,density=Data$Longnose, add=T)
hist(Data$Longnose, density =Data$Longnose)
curve(Data$Longnose, add=T)
as.matrix(density(Data$Longnose))
as.matrix(Data$Longnose)
as.matrix(Data$Longnose, ncol=5)
hist(Data$Longnose, freq=F)
plot(cos, xlim = c(-pi,3*pi), n =
1001,main=expression(cos(x)),ylab=expression(f(x)),
cex.main=0.9)
fx<- function(x) sin(cos(x)*exp(-x/2))
curve(fx, -8, 7,
n=2001,main=expression(sin(cos(x)*exp(-x/2))),
ylab=expression(f(x)),cex.main=0.9)
plot(density(Data$Longnose))
hist(Data$Longnose, freq =F)
plot(density(Data$Longnose), add=TRUE)
hist(Data$Longnose, freq =F)
lines(density(Data$Longnose))
hist(Data$Longnose)
lines(density(Data$Longnose))
hist(Data$Longnose, freq =F)
lines(density(Data$Longnose))
hist(Data$Longnose, freq =F, ylim=c(0,0.025))
lines(density(Data$Longnose))
hist(Data$Longnose, freq =F, ylim=c(0,0.025))
lines(density(Data$Longnose), col="red")
g <- lm(Longnose ~ Temp, data=Data)
g
coef(g)
sg <- summary(g)
sg
sg <- summary(g)
sg$sigma^2
sg$r.squared
coef(g)
length(Data$Longnose)
pf(sg$fstatistic[1], 1, length(Data$Longnose)-2, lower.tail = FALSE)
library(HistData)
data(GaltonFamilies)
help(GaltonFamilies)
# escull el teu cas:
# sexe <- "male"
# sexe <- "female"
GaltonFills <- GaltonFamilies[GaltonFamilies$gender=="female", ]
# selecció a l'atzar d'un ?nic fill o filla per familia
rownames(GaltonFills) <- 1:dim(GaltonFills)[1]
set.seed(123)
ff <- function(x) as.numeric(sample(as.character(which(GaltonFills$family==x)),1))
ind <- sapply(unique(GaltonFills$family),ff)
# data.frame per treballar
GaltonFills1 <- GaltonFills[ind, ]
with(GaltonFills1, plot(father, childHeight))
g <- lm(childHeight ~ father, data = GaltonFills1)
with(GaltonFills1, plot(father, childHeight))
abline(g)
(ss <- summary(g))
#i de forma individual així:
coef(g)
sg$sigma^2
sg
sg$sigma
sg$r.squared
pf(sg$fstatistic[1], 1, length(Data$Longnose)-2, lower.tail = FALSE)
length(Data$Longnose)-2
sg
sg$fstatistic
sg$fstatistic$value
sg$fstatistic[value]
sg$fstatistic[1]
sg$sigma
qqnorm(Data$Longnose)
qqnorm(log(Data$Longnose))
qqline(log(Data$Longnose))
log <- log(Data$Longnose)
qqnorm(log)
qqline(log) # Per a que surti la linea a comparar
# Numericament: amb el test de shapiro
shapiro.test(log) #p-valor < 0.05, les dades son normals
# Amb el test de normalitat de D'Agostino:
library(moments)
agostino.test(log)
agostino.test(Data$Longnose)
hist(log, freq =F, ylim=c(0,0.025))
lines(density(log), col="red")
hist(log, freq =F, ylim=c(0,1))
hist(log, freq =F, ylim=c(0,0.5))
lines(density(log), col="red")
lm(Data)
lm(Data)
sg <- summary(g)
(sg$sigma)
(sg$sigma)^2
sg$sigma
with(Data, plot(Longnose, Temp))
abline(g)
with(Data, plot(Longnose, Temp))
abline(g)
g <- lm(Longnose ~ Temp, data=Data)
with(Data, plot(Longnose, Temp))
abline(g)
with(Data, plot(Longnose, Temp))
plot(Data$Longnose, Data$Temp) #Opcio 2
with(Data, plot(Longnose, Temp))
abline(g)
plot(g, which=1)
plot(g)
plot(g, which=1)
plot(g, which=2)
plot(g, which=3)
plot(g, which=4)
plot(g, which=0)
plot(g, which=1)
plot(g, which=2)
plot(g, which=3)
residuals(g)
dist <- c(100, 200, 400, 800, 1500, 5000, 10000, 42192)
th <- c(9.84, 19.32, 43.19, 102.58, 215.78, 787.96, 1627.34, 7956.00)
td <- c(10.94, 22.12, 48.25, 117.73, 240.83, 899.88, 1861.63, 8765.00)
mod.h <- lm(log(th) ~ I(log(dist)))
mod.d <- lm(log(td) ~ I(log(dist)))
coef(mod.h)
coef(mod.d)
alpha1 <- c(rep(1,8), rep(0,8))
beta1 <- c(log(dist), rep(0,8))
alpha2 <- c(rep(0,8), rep(1,8))
beta2 <- c(rep(0,8), log(dist))
temps <- c(th,td)
g <- lm(log(temps) ~ 0 +alpha1 + beta1 + alpha2 + beta2) # modelo general
model.matrix(g)
coef(g)
g0 <- lm(log(temps) ~ 0 + alpha1 + I(beta1+beta2) + alpha2) # modelo de la hipotesis nula
anova(g0,g)
qr(model.matrix(g))$rank ## para calcular el rango de model matrix
g0 <- lm(log(temps) ~ beta1 + beta2)
anova(g0,g)
g0 <- lm (log(temps) ~ I(beta1+beta2))
model.matrix(g0)
anova(g0,g)
g <- lm(log(temps) ~ 0 + alpha1 + I(beta1+beta2) + alpha2)
g0 <- lm(log(temps) ~ I(beta1+beta2))
anova(g0,g)
var.test(residuals(mod.h),residuals(mod.d))
library(car)
residus<- c(residuals(mod.h),residuals(mod.d))
grup <- factor(c(rep(1,8),rep(2,8)))
leveneTest(residus,grup)
data("anscombe")
str(anscombe)
attach(anscombe)
plot(x1,y1)
r1 <- lm(y1 ~ x1)
abline(r1)
plot(x2,y2)
r2 <- lm(y2 ~ x2)
abline(r2)
plot(x3,y3)
r3 <- lm(y3 ~ x3)
abline(r3)
plot(x4,y4)
r4 <- lm(y4 ~ x4)
abline(r4)
r1
plot(r1)
# 2? grafico, sobre la normalidad no pasa nada
# 3? grafico, no se ve la patologia que se veia en el primero, lo ideal es una linea horizontal recta
# 4? aun no lo podemos comentar
plot(r2)
plot(r1, which=1)
plot(r1, which=2)
plot(r1, which=3)
plot(r1, which=4)
plot(r1, which=1)
plot(r1, which=1)
plot(r1, which=1)#1 grafico, grafico ideal, errores aleatorios
plot(r1, which=1)#1 grafico, grafico ideal, errores aleatorios
plot(r2, which=1)
plot(g, which=1)
plot(r1, which=2)
plot(r2, which=2)
plot(g, which=2)
plot(r1, which=3)#3 grafico, esta bien aunque no salga todo horizontal porque la curva que se ve puede ser asi porque hay pocos datos
plot(r2, which=3)
plot(g, which=3)
plot(g, which=1) # Y:Residuals, x:Fitted values.
plot(r2, which=1)
plot(r2, which=3)
plot(g, which=1) # Residuals vs Fitted
plot(g, which=3) # Scale-Location
plot(r1, which=4)
plot(r2, which=4)
plot(r3, which=4)
plot(g, which=4)
plot(g, which=1) # Residuals vs Fitted
plot(g, which=3) # Scale-Location
# BIEN: Esta be ja que s'observa una recta horitzontal (pe. si hi ha alguna curva petita dir que es perq hi ha poques dades)
plot(g, which=1) # Residuals vs Fitted
shapiro.test(residuals(g))
confint(g, level=0.98)
g
g <- lm(Longnose ~ Temp, data=Data)
g
confint(g, level=0.98)
sg$df[2]
RSS <- sum(sg$residuals^2)
c(RSS/qchisq(0.95, ss$df[2]), RSS/qchisq(0.05, ss$df[2]))
ss$df[2]
g <- lm(Longnose ~ Temp, data=Data)
sg <- summary(g)
confint(g, level=0.98)
confint(g, level=0.90)
#Per a la variancia del model, cal ferho a ma:
RSS <- sum(sg$residuals^2)
c(RSS/qchisq(0.90, ss$df[2]), RSS/qchisq(0.10, ss$df[2]))
sg
ss$df[2]
c(RSS/qchisq(0.95, ss$df[2]), RSS/qchisq(0.05, ss$df[2]))
RSS <- sum(sg$residuals^2)
c(RSS/qchisq(0.95, ss$df[2]), RSS/qchisq(0.05, ss$df[2]))
confint(g, level=0.90)
g
View(GaltonFills1)
(0.446 - 0.495)/0.0669
coef(g)      # Estimacio parametres
sg <- summary(g)
sg
x <- c(1, 2, 5, 10, 20)
y <- c(0.69, 1.43, 3.48, 6.95, 14.09)
recta <- lm(y ~ x)
summary(recta)
coef(recta)
g <- lm(Longnose ~ Temp, data=Data)
sg <- summary(g)
sg
coef(g)      # Estimacio parametres: $\beta_0 = $
(sg$sigma)^2 # Estimacio sigma2
(sg$sigma)
sg
sf$coef
sg$coef
sg$coef[2,1]
coefficients(g)
vcov(g)
var
t <-  (coefficients(recta)[[2]] - 3)/sqrt(vcov(g)[2,2])
p_value <- 2*pt(t_exp2, n-r, lower.tail = TRUE)  # df = n-r = 5 - 2 = 3
p_value <- 2*pt(t, n-r, lower.tail = TRUE)  # df = n-r = 5 - 2 = 3
p_value
View(Data)
g0 <- lm(Longnose ~Acerage + Maxdepth + SO4 + Temp + I(Do2 + NO3), data= Data)
g0 <- lm(Longnose ~Acerage + Maxdepth + SO4 + Temp + I(DO2 + NO3), data= Data)
anova(g0, g) # g0 es el model de la Ho y g, el model general.
g <- lm(Longnose ~ Acerage + DO2 + Maxdepth  + NO3 + SO4 + Temp)
g <- lm(Longnose ~ Acerage + DO2 + Maxdepth  + NO3 + SO4 + Temp,  data= Data)
g0 <- lm(Longnose ~ Acerage + Maxdepth + SO4 + Temp + I(DO2 + NO3), data= Data)
anova(g0, g) # g0 es el model de la Ho y g, el model general.
g0 <- lm(Longnose ~ Acerage + Maxdepth + SO4 + Temp + I(DO2 + NO3), data= Data)
g1 <- lm(Longnose ~ Acerage + DO2 + Maxdepth  + NO3 + SO4 + Temp,  data= Data)
anova(g0, g1) # g0 es el model de la Ho y g1, el model general.
t <-  (coefficients(g)[[2]] - 3)/sqrt(vcov(g)[2,2])
p_value <- 2*pt(t, n-r, lower.tail = TRUE)
p_value
g0 <- lm(Longnose ~ offset(Temp))
g0 <- lm(Longnose ~ offset(Temp), data=Data)
g <- lm(Longnose ~ Temp, data=Data)
anova(g0, g)
t <-  (coefficients(g)[[2]] - 3)/sqrt(vcov(g)[2,2])
p_value <- 2*pt(t, n-r, lower.tail = TRUE)
p_value
coefficients(g)
vcoc(g)
vcov(g)
t <-  (coefficients(g)[[2]] - 3)/sqrt(vcov(g)[2,2])
p_value <- 2*pt(t, n-r, lower.tail = TRUE)
g <- lm(Longnose ~ Temp, data=Data)
g0 <- lm(Longnose ~ offset(Temp), data=Data)
anova(g0, g)
g0 <- lm(Longnose ~ offset(3*Temp), data=Data)
anova(g0, g)
g0 <- lm(Longnose ~ 3*offset(Temp), data=Data)
g0 <- lm(Longnose ~ 3*Temp, data=Data)
g0 <- lm(Longnose ~ 3*Temp, data=Data)
g0 <- lm(Longnose ~ 3+Temp, data=Data)
g0 <- lm(Longnose ~ 3 + Temp, data=Data)
anova(g0, g)
anova(g0, g)
g0 <- lm(Longnose ~ Acerage + Maxdepth + SO4 + Temp + I(DO2 + NO3), data= Data)
g1 <- lm(Longnose ~ Acerage + DO2 + Maxdepth  + NO3 + SO4 + Temp,  data= Data)
anova(g0, g1) # g0 es el model de la Ho y g1, el model general.
predict(g, newdata= data.frame(Temp <- Temp + 1), interval = "prediction", level = 0.9)
predict(g, newdata= data.frame(Data$Temp <- Temp + 1), interval = "prediction", level = 0.9)
predict(g, newdata= data.frame(Data$Temp <- Data$Temp + 1), interval = "prediction", level = 0.9)
View(Data)
predict(g, newdata= data.frame(Data$Temp = Data$Temp + 1), interval = "prediction", level = 0.9)
predict(g, newdata= data.frame(Data$Temp <- Data$Temp + 1), interval = "prediction", level = 0.9)
with(Data, predict(g, newdata= data.frame(Temp <- Temp + 1), interval = "prediction", level = 0.9))
g
g <- lm(childHeight ~ father, data = GaltonFills1)
coef(g)
predict(g, newdata = data.frame(father = 70), interval = "confidence", level = 0.99)
predict(g, newdata= data.frame(Temp <- 25), interval = "prediction", level = 0.9)
predict(g, newdata= data.frame(Temp <- 25), interval = "prediction", level = 0.9)
g <- lm(Longnose ~ Temp, data=Data)
predict(g, newdata= data.frame(Temp <- 25), interval = "prediction", level = 0.9)
predict(g, newdata= data.frame(Temp <- Temp+1), interval = "prediction", level = 0.9)
predict(g, newdata= data.frame(Temp <- Temp+1), interval = "confidence", level = 0.9)
predict(g, newdata= data.frame(Temp <- Temp+1), interval = "prediction", level = 0.99)
predict(g, newdata= data.frame(Temp <- Temp+1), interval = "prediction", level = 0.9)
predict(g, newdata= data.frame(Temp = Temp+1), interval = "prediction", level = 0.9)
longitud <- c(0.92,1.29,1.0,1.5,1.25,1.54,1.26,1.71,1.28,1.16,1.43,1.8,1.5,1.57,1.75)
poblacio <- c(rep("a",9),rep("f",6))  # = rep(c("a","f"),c(9,6))
as.data.frame(longitud)
per <- as.data.frame(longitud)
per$poblacio <- as.data.frame(poblacio)
per
library(faraway)
data(gala, package = "faraway")
install.packages("faraway")
data(gala, package = "faraway")
View(anscombe)
View(Data)
gala
View(gala)
lmod <- lm(Species ~ Area + Elevation + Nearest + Scruz + Adjacent, gala)
nreps <- 4000
set.seed(123)
fstats <- numeric(nreps)
for (i in 1:nreps) {
lmods <- lm(sample(Species) ~ Nearest + Scruz, gala)
fstats[i] <- summary(lmods)$fstat[1]
}
mean(fstats > lms$fstat[1])
summary(lmod)$coef[3, ]
lms <- summary(lmod)
lms$fstatistic
mean(fstats > lms$fstat[1])
summary(lmod)$coef[3, ]
tstats <- numeric(nreps)
set.seed(123)
for (i in 1:nreps) {
lmods <- lm(Species ~ Nearest + sample(Scruz), gala)
tstats[i] <- summary(lmods)$coef[3, 3]
}
mean(abs(tstats) > abs(lms$coef[3, 3]))
cor(Data)
View(Data)
lmods <- lm(sample(Longnose) ~ 0+0+0+0+0+0+ I(Acerage + DO2 + Maxdepth  + NO3 + SO4 + Temp), gala)
lmods <- lm(sample(Longnose) ~ 0+0+0+0+0+0+ I(Acerage + DO2 + Maxdepth  + NO3 + SO4 + Temp), Data)
lmod <- lm(Longnose ~ Acerage + DO2 + Maxdepth  + NO3 + SO4 + Temp,  data= Data)
nreps <- 1000
set.seed(123)
fstats <- numeric(nreps)
for (i in 1:nreps) {
lmods <- lm(sample(Longnose) ~ 0+0+0+0+0+0+ I(Acerage + DO2 + Maxdepth  + NO3 + SO4 + Temp), Data)
fstats[i] <- summary(lmods)$fstat[1]
}
fstats
mean(fstats)
summary(fstats)
lmods
cor(lmods)
g
predict(g, newdata= data.frame(Temp <- Temp+1), interval = "prediction", level = 0.9)
Temp
Data$Temps
Data$Temp
Data$Temp <- Data$Temp + 1
predict(g, Data, interval = "prediction", level = 0.9)
p <-predict(g, Data, interval = "prediction", level = 0.9)
mean(p)
p
p[1]
p[1,2]
mean(p[, 2])
mean(p[, 3])
predict(g, newdata= data.frame(Temp <- Temp+1), interval = "prediction", level = 0.9)
c(mean(p[, 2]), mean(p[, 3]))
View(gala)
View(per)
mean(Data$Temp)
r1 <- lm(Longnose ~ Temp, data= Data, subset = Temp>20)
r2 <- lm(Longnose ~ Temp, data= Data, subset = Temp<=20)
r1
r2
idx <- Data$Temp > 20
idx <- Data$Temp > 20
plot(Data$Longnose, Data$Temp, pch=ifelse(idx, 1, 20), xlab="Temperatura", ylab="Longnose")
abline(r1)
abline(r2, ltu=2)
abline(r2, lty=2)
idx <- Data$Temp > 20
plot(Data$Longnose, Data$Temp, pch=ifelse(idx, 1, 20), xlab="Temperatura", ylab="Longnose")
abline(r1)
abline(r2, lty=2)
