###### LECTURA DE DADES I APROXIMACIÓ DESCRIPTIVA: ######
dd <- read.table("Ansiedad.txt", header=T)
dd

control <- dd$Control # Vector de valors del grup control
Stelazine <- dd$Stelazine # Vector de valors del grup Stelazine
auc <- c(control, Stelazine)

# Tamanys mostrals
n1 <- length(control)
n2 <- length(Stelazine)
N <- n1 + n2

# Indicis de normalitat (o no) de les dades
par(mfrow=c(1,2))
hist(control, main="Histograma per a control")
hist(Stelazine, main="Histograma per a Stelazine")

###### PREGUNTA 1 ######
# 1. Hipòtesi nul·la: les dades de "control" i de "Stelazine" provenen d'una mateixa distribució.

# 2. Calculem l'estadístic suma de valors del grup "Control"
sum <- sum(control)
sum

# 3. Nombre de permutacions.
factorial(N)  # enorme
choose(N, n1) # també és massa gran

# 4. Càlcul del pvalor estimat.
# Primer generem nperm permutacions aleatòries i calculem l'estadístic per a cadascuna de les combinacions
nperm <- 99999
set.seed(123)
sum.perm <- replicate(nperm, sum(auc[sample(1:N, size=n1)]))
sum.perm[1:10] # Valor de l'estadístic per a les 10 primeres remostres.

# Estimador proposat per Dwass com a estimador del p-valor.
(sum(sum.perm >= sum)+1)/ (nperm+1) # test unilateral

# 5. Conclusió.
# Pvalor = 0.17806, superior a 0.05. No hi ha suficients evidències per poder rebutjar la nul·la i per tant, no hi ha motius per # pensar que Stelazine sigui millor per controlar el grau d'ansietat.

###### PREGUNTA 2 ######

## 2.1 Interval de confiança per a la diferència de mitjanes.
# 2.1.1 Test de permutacions per a la diferència de mitjanes.

# Creem funció que calcula la diferència de mitjanes.
diff.means <- function(index, dades){
  mean(dades[index])-mean(dades[-index])
}

# Calculem l'estadístic sobre la mostra real.
dmeansReal <- diff.means(1:n1, auc)
dmeansReal

# Generem nperm permutacions aleatòries i calculem l'estadístic per a cadascuna de les combinacions
set.seed(123)
dmeansPerm <- replicate(nperm, diff.means(sample(1:N, size=n1),auc))
dmeansPerm[1:10] # Valor de l'estadístic per a les 10 primeres remostres.

# Estimador proposat per Dwass com a estimació del p-valor.
(sum(dmeansPerm >= dmeansReal)+1)/(nperm+1)


# 2.2.2 Interval de confiança.
library(perm)
permTS(control, Stelazine, alternative = "greater", method = "exact.mc", control = permControl(nmc = 99999, seed = 123, tsmethod = "abs", p.conf.level=.95))  # IC: [0.1765804, 0.1813418]


## 2.2 Interval de confiança bootstrap-t.

# Funció que calcula l'estadístic t per la diferència de mitjanes
tStat <- function(x1, x2, delta = 0, var.equal = FALSE){
  t.test(x1, x2, mu = delta, var.equal = var.equal)$statistic
}

# Funció que calcula l'error estàndard de la diferència de mitjanes mostrals
se.diffMeans <- function(x1, x2, var.equal = FALSE){
  if(var.equal){
    m1 <- mean(x1)
    m2 <- mean(x2)
    result <- sqrt((length(x1)-1)*(sum((x1-m1)^2))+(length(x2)-1)*(sum((x2-m2)^2)))/(length(x1)+length(x2)-2)
    return(result)
  } else{
    return(sqrt(var(x1)/length(x1)+var(x2)/length(x2)))
  }
}

# Càlcul de la diferència de mitjanes i l'error estàndard per a las dades mostrals.
deltaEstim <- mean(control)-mean(Stelazine)
deltaEstim
seEstim <- se.diffMeans(control, Stelazine, var.equal = T) # suposem igualtat de variàncies
seEstim

# Generació de remostres i càlcul de l'estadístic t per a cada una.
alpha <- 0.05
B=10000 # nombre de remostres
t.boot<- replicate(B,
                   tStat(
                     sample(control, replace=TRUE),
                     sample(Stelazine, replace=TRUE),
                     delta = deltaEstim, var.equal = TRUE
                   )
          )
t.boot[1:10] # Valor de l'estadístic per a les 10 primeres remostres.


# Interval bootstrap-t:
IC <- deltaEstim - quantile(t.boot, probs = c(1 - alpha/2, alpha/2)) * seEstim
names(IC) = NULL
attr(IC, "conf.level") = 1 - alpha
IC # [-0.5978565, 1.1104068]

## 2.3 Interval de confiança bootstrap-t simetritzat.

# Càlcul de l'estimació del valor t_{1-\alpha} mitjançant remostratge bootstrap:
t1_alpha = quantile(abs(t.boot), probs = 1 - alpha)

# Interval bootstrap-t simetritzat:
ICsim <- deltaEstim - c(t1_alpha, -t1_alpha) * seEstim
names(IC) = NULL
attr(IC, "conf.level") = 1 - alpha
ICsim #[-0.6574345,  1.0486845]


## 2.4 Interval de confiança percentil.
# Observar que s'aprofitaran els valors t bootstrap obtinguts abans:
# Interval bootstrap-p:
icBoot.perc = quantile(t.boot, probs = c(alpha/2, 1 - alpha/2))
names(icBoot.perc) = NULL
attr(icBoot.perc, "conf.level") = 1 - alpha
icBoot.perc


## 2.5 Interval de confiança

# Obtenció de N rèpliques jackknife de la diferència de mitjanes.
dif_i <- vector()
for(i in 1:n1){
  dif_i[i] <- mean(dd[-i,"Control"])-mean(dd[-i,"Stelazine"])  #càlcul de la diferència de mitjanes eliminant l'observació i.
}
dif_i # N rèpliques jackknife de la diferència de mitjanes.

# Càlcul de l'acceleració de l'error estàndard.
resta<-mean(dif_i)-dif_i
a <- sum(resta^3)/(6*sum(resta^2)^1.5)
a

# Càlcul de l'estadístic t sobre la mostra real:
tReal<- t.test(control, Stelazine, mu = 0, var.equal = T)$statistic
tReal

# Càlcul del factor de correcció del biaix.
z0 <- qnorm(sum(t.boot>=tReal)/B)
z0

# Valors crítics:
prob1 <-pnorm(z0 + (z0+qnorm(alpha/2))/(1- a*(z0+qnorm(alpha/2))))
prob2 <-pnorm(z0 + (z0-qnorm(alpha/2))/(1- a*(z0-qnorm(alpha/2))))

# Interval BCa:
icBoot.Bca = quantile(t.boot, probs = c(prob1, prob2))
names(icBoot.Bca) = NULL
attr(icBoot.Bca, "conf.level") = 1 - alpha
icBoot.Bca # [-4.75384541, -0.01996617]


