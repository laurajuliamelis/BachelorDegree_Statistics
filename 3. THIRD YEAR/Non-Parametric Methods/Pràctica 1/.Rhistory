install.packages("perm")
setwd("~/Desktop/noparam")
dd <- read.table("Ansiedad.txt", header=T)
dd
control <- dd$Control # Vector de valors del grup control
Stelazine <- dd$Stelazine # Vector de valors del grup Stelazine
auc <- c(control, Stelazine)
# Tamanys mostrals
n1 <- length(control)
n2 <- length(Stelazine)
N <- n1 + n2
# Indicis de normalitat (o no) de les dades
par(mfrow=c(1,2))
hist(control, main="Histograma per a control")
hist(Stelazine, main="Histograma per a Stelazine")
# Calculem l'estadístic suma de valors del grup "Control"
sum <- sum(control)
sum
# Nombre de permutacions.
factorial(N)  # enorme
choose(N, n1) # també és massa gran
# Generem nperm permutacions aleatòries i calculem l'estadístic per a cadascuna de les combinacions
nperm <- 99999
set.seed(123)
sum.perm <- replicate(nperm, sum(auc[sample(1:N, size=n1)]))
sum.perm[1:10] # Valor de l'estadístic per a les 10 primeres remostres.
# Estimador proposat per Dwass com a estimador del p-valor.
(sum(sum.perm >= sum)+1)/ (nperm+1) # test unilateral
# Creem funció que calcula la diferència de mitjanes.
diff.means <- function(index, dades){
mean(dades[index])-mean(dades[-index])
}
# Calculem l'estadístic sobre la mostra real.
dmeansReal <- diff.means(1:n1, auc)
dmeansReal
# Generem nperm permutacions aleatòries i calculem l'estadístic per a cadascuna de les combinacions
set.seed(123)
dmeansPerm <- replicate(nperm, diff.means(sample(1:N, size=n1),auc))
dmeansPerm[1:10] # Valor de l'estadístic per a les 10 primeres remostres.
auc
View(dd)
dd["pareja"]
dd$Pareja
dd$Pareja[-1]
dd$Pareja[-2]
dd$Pareja[-5]
dd<- dd$Pareja[-5]
dd <- read.table("Ansiedad.txt", header=T)
dd
dd[-1]
dd[,-1]
dd[-1,]
mean(dd[-1,"control"])
dd[-1,"Control"]
mean(dd[-1,"Control"])
mean(dd$Control)
mean(dd[,"Control"])
dif_i <- numeric(N)
for(i in 1:N){
dif_i <- mean(dd[-i,"Control"])-mean(dd[-i,"Stelazine"])
}
dif_i
dif
dif_i <- vector()
for(i in 1:N){
dif_i[i] <- mean(dd[-i,"Control"])-mean(dd[-i,"Stelazine"])
}
dif_i
mean(dd[-1,"Control"])-mean(dd[-1,"Stelazine"])
mean(dd[-2,"Control"])-mean(dd[-2,"Stelazine"])
mean(dd[-3,"Control"])-mean(dd[-3,"Stelazine"])
mean(dif_i)-dif_i
mean(dif_i)
resta<-mean(dif_i)-dif_i
a <- sum(resta^3)/(6*sum(resta^2)^1.5)
a
tReal<- t.test(Control, Stelazine, mu = 0, var.equal = var.equal)$statistic
tReal<- t.test(control, Stelazine, mu = 0, var.equal = var.equal)$statistic
t.test(control, Stelazine, mu = 0, var.equal = var.equal)
t.test(control, Stelazine, mu = 0, var.equal = T)
tReal<- t.test(control, Stelazine, mu = 0, var.equal = T)$statistic
tReal<- t.test(control, Stelazine, mu = 0, var.equal = T)$statistic
tReal
t.boot[1:10]
alpha <- 0.05
B=10000
t.boot<- replicate(B,
tStat(
sample(control, replace=TRUE),
sample(Stelazine, replace=TRUE),
delta = deltaEstim, var.equal = TRUE
)
)
# Funció que calcula l'estadístic t per la diferència de mitjanes
tStat <- function(x1, x2, delta = 0, var.equal = FALSE){
t.test(x1, x2, mu = delta, var.equal = var.equal)$statistic
}
# Funció que calcula l'error estàndard de la diferència de mitjanes mostrals
se.diffMeans <- function(x1, x2, var.equal = FALSE){
if(var.equal){
m1 <- mean(x1)
m2 <- mean(x2)
result <- sqrt((length(x1)-1)*(sum((x1-m1)^2))+(length(x2)-1)*(sum((x2-m2)^2)))/(length(x1)+length(x2)-2)
return(result)
} else{
return(sqrt(var(x1)/length(x1)+var(x2)/length(x2)))
}
}
deltaEstim <- mean(control)-mean(Stelazine)
deltaEstim
seEstim <- se.diffMeans(control, Stelazine, var.equal = T) # suposem igualtat de variàncies
seEstim
alpha <- 0.05
B=10000
t.boot<- replicate(B,
tStat(
sample(control, replace=TRUE),
sample(Stelazine, replace=TRUE),
delta = deltaEstim, var.equal = TRUE
)
)
t.boot[1:10] # Valor de l'estadístic per a les 10 primeres remostres.
tReal
t.boot[2:20]
t.boot[2:30]
z0 <- qnorm(sum(t.boot-tReal)/B)
z0
sum(t.boot-tReal)
z0 <- qnorm(sum(t.boot<=tReal)/B)
z0
# Interval BCa:
prob1 <-pnorm(z0 + (z0-qnorm(alpha/2))/(1- a*(z0-qnorm(alpha/2)))
# Interval BCa:
prob1 <-pnorm(z0 + (z0-qnorm(alpha/2))/(1- a*(z0-qnorm(alpha/2))))
# Interval BCa:
prob1 <-pnorm(z0 + (z0-qnorm(alpha/2))/(1- a*(z0-qnorm(alpha/2))))
# Interval BCa:
prob1 <-pnorm(z0 + (z0-qnorm(alpha/2))/(1- a*(z0-qnorm(alpha/2))))
prob2 <-pnorm(z0 + (z0+qnorm(alpha/2))/(1- a*(z0+qnorm(alpha/2))))
icBoot.Bca = quantile(t.boot, probs = c(prob1, prob2))
names(icBoot.Bca) = NULL
attr(icBoot.Bca, "conf.level") = 1 - alpha
icBoot.Bca
# Interval bootstrap-p:
icBoot.perc = quantile(t.boot, probs = c(alpha/2, 1 - alpha/2))
names(icBoot.perc) = NULL
attr(icBoot.perc, "conf.level") = 1 - alpha
icBoot.perc
t1_alpha = quantile(abs(t.boot), probs = 1 - alpha)
# Interval bootstrap-t simetritzat:
IC <- deltaEstim - c(t1_alpha, -t1_alpha) * seEstim
names(IC) = NULL
attr(IC, "conf.level") = 1 - alpha
IC
# Interval bootstrap-t:
IC <- deltaEstim - quantile(t.boot, probs = c(1 - alpha/2, alpha/2)) * seEstim
names(IC) = NULL
attr(IC, "conf.level") = 1 - alpha
IC
t1_alpha = quantile(abs(t.boot), probs = 1 - alpha)
# Interval bootstrap-t simetritzat:
ICsim <- deltaEstim - c(t1_alpha, -t1_alpha) * seEstim
names(IC) = NULL
attr(IC, "conf.level") = 1 - alpha
ICsim
cbind(Bootrstrap=IC, Simetritzat=ICsim, Percentil=icBoot.perc, BCa=icBoot.Bca)
rbind(Bootrstrap=IC, Simetritzat=ICsim, Percentil=icBoot.perc, BCa=icBoot.Bca)
IC
IC[1]
rbind(Bootrstrap=cbind(Inferior=IC[1], Superior=IC[2]), Simetritzat=cbind(Inferior=ICsim[1], Superior=ICsim[2]), Percentil=cbind(Inferior=icBoot.perc[1], Superior=icBoot.perc[2]), BCa=cbind(Inferior=icBoot.Bca[1], Superior=icBoot.Bca[2]))
taula <-rbind(Bootrstrap=cbind(Inferior=IC[1], Superior=IC[2]), Simetritzat=cbind(Inferior=ICsim[1], Superior=ICsim[2]), Percentil=cbind(Inferior=icBoot.perc[1], Superior=icBoot.perc[2]), BCa=cbind(Inferior=icBoot.Bca[1], Superior=icBoot.Bca[2]))
rownames(taula)<- c("Bootrstrap", "Simetritzat","Percentil","BCa")
taula
dd[-i,"Control"]
dd[-3,"Control"]
View(dd)
dif_i
mean(dd[-14,"Control"])-mean(dd[-14,"Stelazine"])
mean(dd[-17,"Control"])-mean(dd[-17,"Stelazine"])
mean(dd[-18,"Control"])-mean(dd[-18,"Stelazine"])
mean(dd[-18,"Control"])
mean(dd[-18,"Stelazine"])
mean(dd[-19,"Stelazine"])
mean(dd[-19,"Control"])
dif_i <- vector()
for(i in 1:n1){
dif_i[i] <- mean(dd[-i,"Control"])-mean(dd[-i,"Stelazine"])
}
dif_i
resta<-mean(dif_i)-dif_i
a <- sum(resta^3)/(6*sum(resta^2)^1.5)
a
tReal<- t.test(control, Stelazine, mu = 0, var.equal = T)$statistic
tReal
z0 <- qnorm(sum(t.boot<=tReal)/B)
z0
# Interval BCa:
prob1 <-pnorm(z0 + (z0-qnorm(alpha/2))/(1- a*(z0-qnorm(alpha/2))))
prob2 <-pnorm(z0 + (z0+qnorm(alpha/2))/(1- a*(z0+qnorm(alpha/2))))
icBoot.Bca = quantile(t.boot, probs = c(prob1, prob2))
names(icBoot.Bca) = NULL
attr(icBoot.Bca, "conf.level") = 1 - alpha
icBoot.Bca
dif_i <- vector()
for(i in 1:n1){
dif_i[i] <- mean(dd[-i,"Control"])-mean(dd[-i,"Stelazine"])
}
dif_i <- vector()
for(i in 1:n1){
dif_i[i] <- mean(dd[-i,"Control"])-mean(dd[-i,"Stelazine"])
}
dif_i
resta<-mean(dif_i)-dif_i
a <- sum(resta^3)/(6*sum(resta^2)^1.5)
a
z0 <- qnorm(sum(t.boot<=tReal)/B)
z0
# Interval BCa:
prob1 <-pnorm(z0 + (z0-qnorm(alpha/2))/(1- a*(z0-qnorm(alpha/2))))
prob2 <-pnorm(z0 + (z0+qnorm(alpha/2))/(1- a*(z0+qnorm(alpha/2))))
icBoot.Bca = quantile(t.boot, probs = c(prob1, prob2))
names(icBoot.Bca) = NULL
attr(icBoot.Bca, "conf.level") = 1 - alpha
icBoot.Bca
resta
z0 <- qnorm(sum(dmeansPerm>=dmeansReal)/B)
z0
z0 <- qnorm(sum(dmeansPerm>=dmeansReal)/B)
z0
sum(dmeansPerm>=dmeansReal)
B
17805/B
qnorm(1.7805)
qnorm(0.7805)
library(perm)
install.packages("perm")
library(perm)
permTS(control, Stelazine, alternative = "greater", method = "exact.mc", control = permControl(nmc = 99999, seed = 123, tsmethod = "abs", p.conf.level=.95))
per <-permTS(control, Stelazine, alternative = "greater", method = "exact.mc", control = permControl(nmc = 99999, seed = 123, tsmethod = "abs", p.conf.level=.95))
per
per$p.conf.int
per$p.values
per$statistic
per$nmc
per$estimate
per$conf.int
# Calculem l'estadístic sobre la mostra real.
dmeansReal <- diff.means(1:n1, auc)
dmeansReal
# Estimador proposat per Dwass com a estimació del p-valor.
(sum(dmeansPerm >= dmeansReal)+1)/(nperm+1)
warnings()
pvalor <- (sum(dmeansPerm>=dmeansReal)+1)/(nperm+1)
pvalor
z0 <- qnorm(pvalor)
z0
# Interval BCa:
prob1 <-pnorm(z0 + (z0-qnorm(alpha/2))/(1- a*(z0-qnorm(alpha/2))))
prob2 <-pnorm(z0 + (z0+qnorm(alpha/2))/(1- a*(z0+qnorm(alpha/2))))
icBoot.Bca = quantile(t.boot, probs = c(prob1, prob2))
names(icBoot.Bca) = NULL
attr(icBoot.Bca, "conf.level") = 1 - alpha
icBoot.Bca
taula <-rbind(Bootrstrap=cbind(Inferior=IC[1], Superior=IC[2]), Simetritzat=cbind(Inferior=ICsim[1], Superior=ICsim[2]), Percentil=cbind(Inferior=icBoot.perc[1], Superior=icBoot.perc[2]), BCa=cbind(Inferior=icBoot.Bca[1], Superior=icBoot.Bca[2]))
rownames(taula)<- c("Bootrstrap", "Simetritzat","Percentil","BCa")
taula
z0 <- qnorm(sum(t.boot>=tReal)/B)
z0
# Interval BCa:
prob1 <-pnorm(z0 + (z0-qnorm(alpha/2))/(1- a*(z0-qnorm(alpha/2))))
prob2 <-pnorm(z0 + (z0+qnorm(alpha/2))/(1- a*(z0+qnorm(alpha/2))))
icBoot.Bca = quantile(t.boot, probs = c(prob1, prob2))
names(icBoot.Bca) = NULL
attr(icBoot.Bca, "conf.level") = 1 - alpha
icBoot.Bca
taula <-rbind(Bootrstrap=cbind(Inferior=IC[1], Superior=IC[2]), Simetritzat=cbind(Inferior=ICsim[1], Superior=ICsim[2]), Percentil=cbind(Inferior=icBoot.perc[1], Superior=icBoot.perc[2]), BCa=cbind(Inferior=icBoot.Bca[1], Superior=icBoot.Bca[2]))
rownames(taula)<- c("Bootrstrap", "Simetritzat","Percentil","BCa")
taula
# Interval BCa:
prob1 <-pnorm(z0 + (z0+qnorm(alpha/2))/(1- a*(z0+qnorm(alpha/2))))
prob2 <-pnorm(z0 + (z0-qnorm(alpha/2))/(1- a*(z0-qnorm(alpha/2))))
icBoot.Bca = quantile(t.boot, probs = c(prob1, prob2))
names(icBoot.Bca) = NULL
attr(icBoot.Bca, "conf.level") = 1 - alpha
icBoot.Bca
taula <-rbind(Bootrstrap=cbind(Inferior=IC[1], Superior=IC[2]), Simetritzat=cbind(Inferior=ICsim[1], Superior=ICsim[2]), Percentil=cbind(Inferior=icBoot.perc[1], Superior=icBoot.perc[2]), BCa=cbind(Inferior=icBoot.Bca[1], Superior=icBoot.Bca[2]))
rownames(taula)<- c("Bootrstrap", "Simetritzat","Percentil","BCa")
taula
warnings()
warnings()
setwd("~/Desktop/noparam")
setwd("~/Desktop/noparam")
setwd("~/Desktop/Estadística/3. Tercer/Segon_quatri/NO PARAMÈTRICS/Pràctica 1")
