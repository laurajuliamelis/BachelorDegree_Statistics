# Mostra de xacals (Canis aureus) dissecats, de la col·lecció del British Museum:

mandible <- data.frame(
  sex = factor(rep(c("male", "female"), c(10,10)), levels=c("male","female")),
  len = c(120, 107, 110, 116, 114, 111, 113, 117, 114, 112,
          110, 111, 107, 108, 110, 105, 107, 106, 111, 111)
)

# o bé:

#mandible <- read.table("jackals.data.txt", header = T)

# 'len' és la llargada de la mandíbula.
# Obtenció d'interval de confiança per
# delta = mitjana poblacional mascles - mitjana poblacional femelles

long.m = mandible$len[1:10]
n.m = length(long.m)
long.f = mandible$len[11:20]
n.f = length(long.f)

# Funció que calcula l'estadístic t per 2 mostres independents
# (per defecte calcula l'estadístic t (Welch) per variàncies
# no necessàriament iguals):
tStat = function(mostra1, mostra2, var.equal = FALSE, delta = 0) {
  t.test(mostra1, mostra2, var.equal = var.equal, mu = delta)$statistic
}

# No tenim cap raó pera haver de suposar igualtat de variàncies (al cas
# paramètric, suposar això va molt bé ja que aleshores podem fer servir
# la distribució de Student, però pel cas de l'enfoc bootstrap trobarem
# la distribució de l'estadistic a base d'una simulació, no és indispensable
# cap suposició addicional sobre les variàncies)

# Diferència de mitjanes mostrals (estimador de la diferència de mitjanes
# poblacionals):
delta.estim = mean(long.m) - mean(long.f)
# Error estàndard de la diferència de mitjanes mostrals (sense suposar
# igualtat de variàncies):
se.delta = sqrt(var(long.m) / n.m + var(long.f) / n.f)

# Simulació bootstrap per obtenir B rèpliques bootstrap de l'estadístic t:
B = 10000
set.seed(120)

t.star = replicate(B,
  tStat(
    sample(long.m, replace = TRUE), sample(long.f, replace = TRUE), 
    delta = delta.estim
  )
)

# Interval de confiança bootstrap-t per la diferència de mitjanes:
alfa = 0.025
confi = 1 - 2 * alfa

icBoot.t = delta.estim - quantile(t.star, probs = c(1 - alfa, alfa)) * se.delta
names(icBoot.t) = NULL
attr(icBoot.t, "conf.level") = confi
icBoot.t

# Interval de confiança bootstrap-t simetritzat:

# Valor crític t1_2alfa tal que una proporció 1 - 2 * alfa de valors t*
# estan compresos entre -t1_2alfa i +t1_2alfa:
t1_2alfa = quantile(abs(t.star), probs = confi)

icBoot.t.sim = delta.estim - c(t1_2alfa, -t1_2alfa) * se.delta
names(icBoot.t.sim) = NULL
attr(icBoot.t.sim, "conf.level") = confi
icBoot.t.sim

# Com que 0 no està inclòs en cap d'aquests intervals, tots dos permeten
# rebutjar H0 :  delta = 0 (és a dir, podem afirmar que les mitjanes
# no són iguals)