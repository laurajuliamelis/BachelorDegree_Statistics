# ===================================================================================
# ===================================================================================
# Bootstrap per mostra normal, estadístic mitjana:

# Aquesta mostra fa el paper d'unes "dades reals" però en realitat sabem que
# procedeix d'una N(15, 3)
# ATENCIÓ: AIXÒ ÉS AIXÍ PER QUE ESTEM EN UNA SITUACIÓ "DE LABORATORI", AMB
# DADES REALS LÒGICAMENT DESCONEIXERÍEM COMPLETAMENT ELS PARÀMETRES REALS

x <- c(15.54, 21.06, 16.52, 13.62, 16.14, 10.98, 13.53, 16.02, 16.79, 15.90)

n <- length(x)

# Verdadera procedencia de los datos anteriores: N(mu=15, sigma=3).
# En este caso lo sabemos dado que es una situación "de laboratorio informático".
# Lógicamente en una situación real desconoceríamos los parámetros de la distribución
# de procedencia de los datos (aunque tal vez podríamos hacer alguna conjetura sobre
# su forma, p.e. normal)
mu <- 15
sigma <- 3

# Els nostres coneixements teòrics en permeten dir que la mitjana mostral
# per dades com les anteriors també serà normal, amb mitjana "mu" i desviació
# estàndar que indicarem com "sigma.xBarra":
sigma.xBarra <- sigma/sqrt(n)
sigma.xBarra

windows(21, 21)

# Eje x de los gráficos:
rang.xBarra <- seq(from=mu-3*sigma.xBarra, to=mu+3*sigma.xBarra, by=0.1)

# Verdadera distribución muestral de la media muestral:
dens.veritat <- dnorm(rang.xBarra, mean=mu, sd=sigma.xBarra)
plot(rang.xBarra, dens.veritat, type="l", col="green", ylim=c(0,0.6))


# Estadístics resum per les dades "reals"
xBarra <- mean(x)
S.x <- sqrt(var(x))
S.xBarra <- S.x/sqrt(n)
S.xBarra

# Aproximación normal exacta:
dens.normAprox <- dnorm(rang.xBarra, mean=xBarra, sd=S.xBarra)
lines(rang.xBarra, dens.normAprox, type="l", col="blue")
# ---------------------------------------------------------------------------------
# Bootstrap no paramètric:
# generació d'una remostra (versió no paramètrica):
x
# Una remuestra bootstrap:
sample(x, replace=TRUE)
# 5 remuestras bootstrap, cada columna una remuestra:
B <- 5
mostres.bootstrap <- matrix(sample(x, replace=TRUE, size=B*n), ncol=B)
mostres.bootstrap
# Cálculo del estadístico (media) sobre cada una de las remuestras:
mitjanes.bootstrap <- apply(mostres.bootstrap, 2, mean)
mitjanes.bootstrap

mean(x)

# Proveu també amb B <- 50
B <- 10000
set.seed(127)
mostres.bootstrap <- matrix(sample(x, replace=T, size=B*n), ncol=B)
mitjanes.bootstrap <- apply(mostres.bootstrap, 2, mean)

# Equivalentemente:
set.seed(127)
mitjanes.bootstrap = replicate(B, mean(sample(x, replace=TRUE)))

dens.bootstrap <- density(mitjanes.bootstrap,from=mu-3*sigma.xBarra, to=mu+3*sigma.xBarra)
lines(dens.bootstrap, type="l", col="brown")

# Estimación del sesgo de la media muestral (¡en realidad sabemos que es nulo!)
mean(mitjanes.bootstrap) - xBarra
# Pitjor:
mean(mitjanes.bootstrap) - mu
# Estimación de la varianza de la media muestral
var(mitjanes.bootstrap)
# Estimación del error estándar de la media muestral
sd(mitjanes.bootstrap)
# En este caso sabemos que es sigma.xBarra
sigma.xBarra
# La estimación habitual sería S.xBarra, que suele ser más correcta
S.xBarra

# ---------------------------------------------------------------------------------
# Si en realidad nos podemos fiar de que la forma de la distribución es normal:
# Bootstrap paramètric normal:
# Una sola remostra:
rnorm(n, mean=xBarra, sd=S.x)
B <- 5
matrix( rnorm(B*n, mean=xBarra, sd=S.x), ncol=B)
B <- 10000
set.seed(127)
mostres.bootstrap <- matrix( rnorm(B*n, mean=xBarra, sd=S.x), ncol=B)
mitjanes.bootstrap <- apply(mostres.bootstrap ,2, mean)

dens.bootstrap.param <- density(mitjanes.bootstrap,from=mu-3*sigma.xBarra, to=mu+3*sigma.xBarra)
lines(dens.bootstrap.param, type="l", col="red")



# ===================================================================================
# ===================================================================================
# Mostra exponencial, estadístic mitjana:
x <- c(8.51,  8.71, 69.19, 10.05, 23.64, 8.67, 1.51, 20.36, 1.23, 5.27)
# set.seed(15793)
# x <- rexp(10, rate = 1/mu)

# Igual que antes, conocemos la procedencia de la muestra Expon(rate=1/mu), mu=15.
# Conocemos el verdadero valor de los parámetros poblacionales.
sigma <- mu

n <- length(x)

sigma.xBarra <- sigma/sqrt(n)
xBarra <- mean(x)
S.x <- sqrt(var(x))
S.xBarra <- S.x/sqrt(n)

rang.xBarra <- seq(from=mu-10*sigma.xBarra, to=mu+10*sigma.xBarra, by=0.1)

dens.veritat <- dgamma(rang.xBarra, rate=n/mu, shape=n)

plot(rang.xBarra, dens.veritat, type="l", col="green", ylim=c(0,0.1))

dens.normAprox <- dnorm(rang.xBarra, mean=xBarra, sd=S.xBarra)
lines(rang.xBarra, dens.normAprox, type="l", col="blue")
# ---------------------------------------------------------------------------------
# Bootstrap no paramètric:
B <- 10000
set.seed(127)
mostres.bootstrap <- matrix(sample(x, replace=T, size=B*n), ncol=B)
mitjanes.bootstrap <- apply(mostres.bootstrap ,2, mean)

dens.bootstrap <- density(mitjanes.bootstrap,from=mu-10*sigma.xBarra, to=mu+10*sigma.xBarra)
lines(dens.bootstrap, type="l", col="brown")
# ---------------------------------------------------------------------------------
# Bootstrap paramètric exponencial:
# Una sola remostra:
rexp(n, rate=1/xBarra)
B <- 10000
set.seed(127)
mostres.bootstrap <- matrix( rexp(B*n, rate=1/xBarra), ncol=B)
mitjanes.bootstrap <- apply(mostres.bootstrap,2, mean)

dens.bootstrap.param <- density(mitjanes.bootstrap,from=mu-10*sigma.xBarra, to=mu+10*sigma.xBarra)
lines(dens.bootstrap.param, type="l", col="red")

# Bootstrap paramétrico normal (erróneo):
mitjanes.bootstrap = replicate(B, mean(rnorm(n, mean=xBarra, sd=sd(x))))
dens.bootstrap.param <- density(mitjanes.bootstrap,from=mu-10*sigma.xBarra, to=mu+10*sigma.xBarra)
lines(dens.bootstrap.param, type="l", col="black")

# ===================================================================================
# ===================================================================================
# Mostra normal, estadístic t:
tStud <- function(x, mitjana)
{
	(mean(x) - mitjana) / sqrt(var(x)/length(x))
}

mu <- 15
sigma <- 3
x <- c(15.54, 21.06, 16.52, 13.62, 16.14, 10.98, 13.53, 16.02, 16.79, 15.90)
n <- length(x)

sigma.xBarra <- sigma/sqrt(n)
xBarra <- mean(x)
S.x <- sqrt(var(x))
S.xBarra <- S.x/sqrt(n)
t.x <- tStud(x, mu)
rang.t <- seq(from=-4, to=+4, by=0.1)
dens.veritat <- dt(rang.t, df=n-1)
plot(rang.t, dens.veritat, type="l", col="green", ylim=c(0,0.4))

# A menudo, nos interesa conocer ciertos "valores críticos" de esta distribución
# muestral.
# Valores críticos según la "verdadera" distribución muestral de t
tCritStud <- qt(c(0.975, 0.025), df = n - 1)
tCritStud
# Por ejemplo para calcular un intervalo de confianza paramétrico normal, 
# basado en t(n - 2):
xBarra - tCritStud * S.xBarra

dens.normAprox <- dnorm(rang.t)
lines(rang.t, dens.normAprox, type="l", col="blue")

# valores críticos según aproximación normal:
tCritNorm = qnorm(c(0.975, 0.025))
tCritNorm
# intervalo de confianza según aproximación normal:
xBarra - tCritNorm * S.xBarra


# ---------------------------------------------------------------------------------
# Bootstrap no paramètric:
B <- 10000

set.seed(127)

mostres.bootstrap <- matrix(sample(x, replace=T, size=B*n), ncol=B)
t.bootstrap <- apply(mostres.bootstrap ,2, tStud, mitjana=xBarra)

dens.bootstrap <- density(t.bootstrap,from=-4, to=+4)
lines(dens.bootstrap, type="l", col="red")

# valores críticos según bootstrap no paramétrico
tCritBoot = quantile(t.bootstrap, probs = c(0.975, 0.025))
# intervalo de confianza bootstrap no paramétrico:
xBarra - tCritBoot * S.xBarra

# ---------------------------------------------------------------------------------
# Bootstrap paramètric normal:
# Una sola remostra:
rnorm(n, mean=xBarra, sd=S.x)
B <- 10000
set.seed(127)
mostres.bootstrap <- matrix( rnorm(B*n, mean=xBarra, sd=S.x), ncol=B)
t.bootstrap.param <- apply(mostres.bootstrap ,2, tStud, mitjana=xBarra)

dens.bootstrap.param <- density(t.bootstrap.param,from=-4, to=+4)
lines(dens.bootstrap.param, type="l", col="red")

# valores críticos según bootstrap paramétrico
tCritBoot.param = quantile(t.bootstrap.param, probs = c(0.975, 0.025))
# intervalo de confianza bootstrap paramétrico:
xBarra - tCritBoot.param * S.xBarra


# ---------------------------------------------------------------------------------
# Càlcul d'una probabilitat a la cua dreta: P[t>1.96]
z0.05 <- qnorm(0.025, lower.tail = FALSE)  # 1.959964
1 - pnorm(z0.05)
1 - pt(z0.05, df=n-1)
length(t.bootstrap[t.bootstrap > z0.05])/B
length(t.bootstrap.param[t.bootstrap.param > z0.05])/B

# ===================================================================================
# ===================================================================================
# Mostra exponencial, estadístic t:
sigma <- sqrt(mu)
x <- c(8.51,  8.71, 69.19, 10.05, 23.64, 8.67, 1.51, 20.36, 1.23, 5.27)
n = length(x)
sigma.xBarra <- sigma/sqrt(n)
xBarra <- mean(x)
S.x <- sqrt(var(x))
S.xBarra <- S.x/sqrt(n)
t.x <- tStud(x, mu)
rang.t <- seq(from=-4, to=+4, by=0.1)

# Ara és difícil determinar analíticament quina és la veritable distribució
# mostral de l'estadístic t quan les dades són exponencials.
# Aproximació mitjançant simulació a la veritable distribució mostral.
# Fem una simulació utilitzant els VERITABLES VALORS DELS PARÀMETRES POBLACIONALS
# (en què es diferecia del que fem amb bootstrap?)
m <- 100000
mostra.t <- apply(matrix(rexp(m*n, rate=1/mu), ncol=m), 2, tStud, mitjana=mu)
dens.veritat <- density(mostra.t,from=-4, to=+4)
plot(dens.veritat, type="l", col="green", ylim=c(0,0.4))

# ¿Es pivotal? Probar con distintos valores de "mu": ¿se mantiene estable la distribución
# muestral?
lines(
  density(
    apply(matrix(rexp(m*n, rate=1/5), ncol=m), 2, tStud, mitjana=5), 
    from=-4, to=+4
  ), 
  type="l", col="green", ylim=c(0,0.4)
)

lines(
  density(
    apply(matrix(rexp(m*n, rate=1/30), ncol=m), 2, tStud, mitjana=30), 
    from=-4, to=+4
    ), 
  type="l", col="green", ylim=c(0,0.4)
)

# Parece que sí...


dens.normAprox <- dnorm(rang.t)
lines(rang.t, dens.normAprox, type="l", col="blue")
# ---------------------------------------------------------------------------------
# Bootstrap no paramètric:
B <- 10000
mostres.bootstrap <- matrix(sample(x, replace=T, size=B*n), ncol=B)
t.bootstrap <- apply(mostres.bootstrap ,2, tStud, mitjana=xBarra)

dens.bootstrap <- density(t.bootstrap,from=-4, to=+4)
lines(dens.bootstrap, type="l", col="brown", ylim=c(0,0.4))
# ---------------------------------------------------------------------------------
# Bootstrap paramètric exponencial:
mostres.bootstrap <- matrix(rexp(n=B*n, rate=1/xBarra), ncol=B)
t.bootstrap.param <- apply(mostres.bootstrap ,2, tStud, mitjana=xBarra)

dens.bootstrap.param <- density(t.bootstrap.param,from=-4, to=+4)
lines(dens.bootstrap.param, type="l", col="red", ylim=c(0,0.4))

# ---------------------------------------------------------------------------------
# Càlcul d'una probabilitat a la cua dreta: P[t>1.96]
z0.05 <- qnorm(0.025, lower.tail = FALSE)  # 1.959964
1 - pnorm(z0.05)  # ... aproximació normal
1 - pt(z0.05, df=n-1)  # ... aproximació t
length(mostra.t[mostra.t > z0.05])/m  # ... veritable probabilitat (simulació 100000)
length(t.bootstrap[t.bootstrap > z0.05])/B  # ... bootstrap no paramètric
length(t.bootstrap.param[t.bootstrap.param > z0.05])/B  # ... bootstrap paramètric

# ---------------------------------------------------------------------------------
# Càlcul d'una probabilitat a la cua esquerra: P[t < -1.96]
pnorm(-z0.05)  # ... aproximació normal
pt(-z0.05, df=n-1)  # ... aproximació t
length(mostra.t[mostra.t < -z0.05])/m  # ... "veritable" probabilitat
length(t.bootstrap[t.bootstrap < -z0.05])/B  # ... bootstrap no paramètric
length(t.bootstrap.param[t.bootstrap.param < -z0.05])/B  # ... bootstrap paramètric

# ---------------------------------------------------------------------------------
# Càlcul d'una probabilitat bilateral: P[|t| > 1.96]
pnorm(-z0.05) + (1 - pnorm(z0.05))
pt(-z0.05, df=n-1) + (1 - pt(z0.05, df=n-1))
length(mostra.t[abs(mostra.t) > z0.05])/m
length(t.bootstrap[abs(t.bootstrap) > z0.05])/B
length(t.bootstrap.param[abs(t.bootstrap.param) > z0.05])/B



# ===================================================================================
# ===================================================================================
# Mostra exponencial, estadístic t, n=40:
set.seed(127)
n <- 40
sigma <- sqrt(mu)
x <- rexp(n, rate=1/mu)
sigma.xBarra <- sigma/sqrt(n)
xBarra <- mean(x)
S.x <- sqrt(var(x))
S.xBarra <- S.x/sqrt(n)
t.x <- tStud(x, mu)
rang.t <- seq(from=-4, to=+4, by=0.1)
# Aproximació mitjançant simulació a la veritable distribució mostral:
m <- 10000
mostra.t <- apply(matrix(rexp(m*n, rate=1/mu), ncol=m) ,2, tStud, mitjana=mu)
dens.veritat <- density(mostra.t,from=-4, to=+4)
plot(dens.veritat, type="l", col="green", ylim=c(0,0.4))

dens.normAprox <- dnorm(rang.t)
lines(rang.t, dens.normAprox, type="l", col="blue")
# ---------------------------------------------------------------------------------
# Bootstrap no paramètric:
B <- 10000
mostres.bootstrap <- matrix(sample(x, replace=T, size=B*n), ncol=B)
t.bootstrap <- apply(mostres.bootstrap ,2, tStud, mitjana=xBarra)

dens.bootstrap <- density(t.bootstrap,from=-4, to=+4)
lines(dens.bootstrap, type="l", col="brown")
# ---------------------------------------------------------------------------------
# Bootstrap paramètric exponencial:
mostres.bootstrap <- matrix(rexp(n=B*n, rate=1/xBarra), ncol=B)
t.bootstrap.param <- apply(mostres.bootstrap ,2, tStud, mitjana=xBarra)

dens.bootstrap.param <- density(t.bootstrap.param,from=-4, to=+4)
lines(dens.bootstrap.param, type="l", col="red")

# ---------------------------------------------------------------------------------
# Càlcul d'una probabilitat a la cua dreta: P[t>1.96]
z0.05 <- 1.959964
1 - pnorm(z0.05)  # ... aproximació normal
1 - pt(z0.05, df=n-1)  # ... aproximació t
length(mostra.t[mostra.t > z0.05])/m  # ... veritable probabilitat
length(t.bootstrap[t.bootstrap > z0.05])/B  # ... bootstrap no paramètric
length(t.bootstrap.param[t.bootstrap.param > z0.05])/B  # ... bootstrap paramètric

# ---------------------------------------------------------------------------------
# Càlcul d'una probabilitat a la cua esquerra: P[t < -1.96]
pnorm(-z0.05))  # ... aproximació normal
pt(-z0.05, df=n-1)  # ... aproximació t
length(mostra.t[mostra.t < -z0.05])/m  # ... "veritable" probabilitat
length(t.bootstrap[t.bootstrap < -z0.05])/B  # ... bootstrap no paramètric
length(t.bootstrap.param[t.bootstrap.param < -z0.05])/B  # ... bootstrap paramètric

# ---------------------------------------------------------------------------------
# Càlcul d'una probabilitat bilateral: P[|t| > 1.96]
pnorm(-z0.05) + (1 - pnorm(z0.05))
pt(-z0.05, df=n-1) + (1 - pt(z0.05, df=n-1))
length(mostra.t[abs(mostra.t) > z0.05])/m
length(t.bootstrap[abs(t.bootstrap) > z0.05])/B
length(t.bootstrap.param[abs(t.bootstrap.param) > z0.05])/B
